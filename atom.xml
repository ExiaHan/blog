<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ExiaHan&#39;s Blog</title>
  <subtitle>Record everything, day by day. 记录岁月，记录一切。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.exiahan.com/"/>
  <updated>2017-01-29T19:41:33.263Z</updated>
  <id>http://blog.exiahan.com/</id>
  
  <author>
    <name>ExiaHan</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Expand A Logical Volume In LVM</title>
    <link href="http://blog.exiahan.com/2017/01/29/Expand-A-Logical-Volume-In-LVM/"/>
    <id>http://blog.exiahan.com/2017/01/29/Expand-A-Logical-Volume-In-LVM/</id>
    <published>2017-01-28T19:29:32.000Z</published>
    <updated>2017-01-29T19:41:33.263Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Abstract"><a href="#Abstract" class="headerlink" title="Abstract"></a>Abstract</h2><p>This blog is used to record the instructions about how to expand a logic volume in lvm.</p>
<p><strong>CAUTION!</strong></p>
<ul>
<li><em>What I write here may not completely right because there have been one month passed since I complete migrate my data to SSD.</em></li>
<li><em>Resize volume may cause data lost, so be carefully.</em></li>
<li><strong>Your warranty is now void. I am not responsible for bricked devices, dead SD cards, thermonuclear war, or you getting fired because the alarm app failed and anyother errors.</strong></li>
<li><strong>Do some research before you do this.</strong></li>
</ul>
<h2 id="Start"><a href="#Start" class="headerlink" title="Start"></a>Start</h2><p>To imporve my notebook’s performance, I bought a <a href="https://detail.tmall.com/item.htm?id=45106254084&amp;skuId=3277249424238&amp;areaId=320500&amp;standard=1&amp;user_id=2468908634&amp;cat_id=2&amp;is_b=1&amp;rn=f6d7634bd5d938d82ef5291775194c5c" target="_blank" rel="external">SSD</a> to speed up my notebook’s response speed. Before I start to usd the new inserted SSD to my notebook. The device mapper is like what below picture shows.</p>
<p><img src="/images/expand_a_logical_volume_in_lvm/before.png" alt="device mapper before"></p>
<p>As the pic shows, <strong>sda</strong> is the new <em>SSD</em>, <strong>sdb</strong> is the old hdd, it set <em>sdb3</em> as boot, set the <em>sdb5</em> as the lvm physical volume, and create a volume group named <em>archlvm</em>, in the <em>archlvm</em> volume, there four logical volumes:</p>
<ul>
<li>root. Mounted to the “root” point.</li>
<li>var. Mounted to the “/var” point.</li>
<li>swap. Used as the SWAP File.</li>
<li>home. The largest logical volume, used to store all of my files.</li>
</ul>
<p>Now what I want to do is:</p>
<ol>
<li>Let <strong>sda1</strong> be mounted to “/boot” point.</li>
<li>Migrate contents in <em>archlvm-root</em> to <em>sda2</em>, and then let <strong>sda2</strong> be mounted to “/“ point.</li>
<li>Delete logical volume <em>archlvm-root</em>, and then expand <strong>archlvm-home</strong> to use all the free space we get after delete <em>archlvm-root</em>.</li>
</ol>
<p>The following content will show you how to do this.</p>
<h2 id="Preparing"><a href="#Preparing" class="headerlink" title="Preparing"></a>Preparing</h2><p>To complete all the missions, we need a archlinux-live-usb.</p>
<ul>
<li>Download a <a href="http://mirrors.ustc.edu.cn/archlinux/iso/" target="_blank" rel="external">archlinux iso</a> here. If you are not in China, choose other mirrors :).</li>
<li>Create a live-USB.<ul>
<li>For UEFI Support, it’s highly recommended to use <a href="https://rufus.akeo.ie/?locale=en_US" target="_blank" rel="external">Rufus</a> to create the Live-USB.</li>
</ul>
</li>
</ul>
<h2 id="Migrate-“-Boot”-and-“Root”"><a href="#Migrate-“-Boot”-and-“Root”" class="headerlink" title="Migrate “/Boot” and “Root”"></a>Migrate “/Boot” and “Root”</h2><ul>
<li>Mount the partions like below:</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">|--sda</div><div class="line">   |--sda2 /mnt/</div></pre></td></tr></table></figure>
<p>Then run this command in shell:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># rsync -SPAaXxr --exclude=&#123;/boot,/home,/var&#125;  ./ /mnt/</span></div></pre></td></tr></table></figure></p>
<p>wait the command complete. Then reboot into Live-USB.</p>
<ul>
<li>Mount the partions like below:</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">|--sda</div><div class="line">   |--sda2 /mnt/</div><div class="line">   |--sda1 /mnt/boot</div><div class="line">|--sdb</div><div class="line">   |--sdb5</div><div class="line">      |--archlvm-var /mnt/var</div><div class="line">	  |--archlvm-home /mnt/home</div></pre></td></tr></table></figure>
<ul>
<li><p>turn on the swap</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># swapon /dev/archlvm/swap</span></div></pre></td></tr></table></figure>
</li>
<li><p>Regenerate the fstab(<strong>Remember to check it, it there is something wrong in it, you may can’t boot after reboot without Live-USB</strong>)</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">genfstab -U -p /mnt &gt; /mnt/etc/fstab</div></pre></td></tr></table></figure>
</li>
</ul>
<p>A classic fstab can be found in <a href="https://wiki.archlinux.org/index.php/Fstab" target="_blank" rel="external">ArchLinux WIKI</a>, the UUID you may need can be get by command <strong>blkid</strong></p>
<ul>
<li><strong>arch-chroot</strong> to “/mnt”</li>
<li>Reinstall Grub to <strong>sda</strong></li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># grub-install --target=x86_64-efi --efi-directory=/boot --bootloader-id=grub</span></div></pre></td></tr></table></figure>
<p>After do this, we should not run <strong>grub-mkconfig</strong> immediately, because we haven’t expand the “archlvm-home”.</p>
<h2 id="Expand-Logical-Volume"><a href="#Expand-Logical-Volume" class="headerlink" title="Expand Logical Volume"></a>Expand Logical Volume</h2><p>As I said, what I want is deleting archlvm-root, and expand archlvm-home with the space the being deleted archlvm-root has. Now let’s follow below step to reach this goal.</p>
<ul>
<li>Exit the <strong>arch-chroot</strong></li>
<li>Unmount all the logical volumes in group <strong>archlvm</strong>.(<strong>CAUTION: This must be done, or you may get error.</strong>)</li>
<li>Delete <strong>archlvm-root</strong></li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># lvremove /dev/archlvm/root</span></div></pre></td></tr></table></figure>
<ul>
<li>expand <strong>archlvm-home</strong><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># lvresize -l +100%FREE /dev/archlvm/home</span></div></pre></td></tr></table></figure>
</li>
</ul>
<p>After do this, the <strong>archlvm-home</strong> will take all the free space freed by delete <em>archlvm-root</em>.</p>
<ul>
<li>resizefs(<strong>CAUTION: Althrough it does not cause any error in my notebook, but I know it may cause some error in some scenarios.</strong>)<br>After we execute <em>lvresize</em>, we need to <strong>resize filesystem</strong> to let system know the change.<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># resize2fs /dev/archlvm/home</span></div></pre></td></tr></table></figure>
</li>
</ul>
<p>In somecase, the <strong>resize2fs</strong> may say that you should run command <strong>e2fsck</strong> first. If you get this, run it. (<strong>CAUTION: Althrough it does not cause any error in my notebook, but I know it may cause some error in some scenarios.</strong>)<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># e2fsck -f /dev/archlvm/home</span></div></pre></td></tr></table></figure></p>
<p>After this complete, you can run command <strong>resize2fs</strong>.</p>
<h2 id="Complete"><a href="#Complete" class="headerlink" title="Complete"></a>Complete</h2><p>If all the steps are completed successfully, there is only one instruction we need to do——<em>grub-mkconfig</em></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># grub-mkconfig \-o /boot/grub/grub.cfg</span></div></pre></td></tr></table></figure>
<p>Reboot your computer, now we should migrate our data to SSD and expand logical volume <strong>archlvm-home</strong> successfully.</p>
<p><img src="/images/expand_a_logical_volume_in_lvm/after.png" alt="after"></p>
<p><strong>Tips:</strong></p>
<ul>
<li>Some device may have a legacy entry in EFI loader table. You can delete it in UEFI safely.</li>
<li>If you found anything wrong about device mapper, check your fstab, it is in “/etc/fstab”, to modifiy it, you’d better reboot into the Live-USB again.</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Abstract&quot;&gt;&lt;a href=&quot;#Abstract&quot; class=&quot;headerlink&quot; title=&quot;Abstract&quot;&gt;&lt;/a&gt;Abstract&lt;/h2&gt;&lt;p&gt;This blog is used to record the instructions a
    
    </summary>
    
      <category term="Linux" scheme="http://blog.exiahan.com/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://blog.exiahan.com/tags/Linux/"/>
    
      <category term="LVM" scheme="http://blog.exiahan.com/tags/LVM/"/>
    
      <category term="ArchLinux" scheme="http://blog.exiahan.com/tags/ArchLinux/"/>
    
  </entry>
  
  <entry>
    <title>Happy_Chinese_New_Year_In_2017</title>
    <link href="http://blog.exiahan.com/2017/01/29/Happy-Chinese-New-Year-In-2017/"/>
    <id>http://blog.exiahan.com/2017/01/29/Happy-Chinese-New-Year-In-2017/</id>
    <published>2017-01-28T18:16:22.000Z</published>
    <updated>2017-01-28T19:13:39.022Z</updated>
    
    <content type="html"><![CDATA[<h1 id="TL-DR"><a href="#TL-DR" class="headerlink" title="TL;DR"></a>TL;DR</h1><p>Below is written by a man that with poor English skills. Read carefully if you really want to read.(But I will say thank you if you really read all the contents below. :) )</p>
<p>Happy Chinese new year! In China, all the Chinese now say goodbye to the “Monkey Year” and step into the “year of Chicken”. Watching the Spring Festival Gala Evening provided by CCTV is a tradition for almost every Chinese. We watch the TV shows with families and share the stories that happend to each in Monkey Year.</p>
<p>For me, it is the third year that my families celebrate the new year without my grandfather, who has gone in 2014. Still feel a little sad that I won’t have chance to hear my grandfather’s voice. And I also regret that I did’t capture any short videos for my grandfather when he is alive. Now what I can do is talk with my grandfather’s portrait.</p>
<p>In this year, there are lots of things happend to me: <em>Get a intership</em>, <em>Pass the graduation thesis defense</em>, <em>Get a third rewards in Alibaba’s Security Competition</em> and also, <em>Re-Become a single doge. :)</em></p>
<p>But I am still a student now, and this may be my last school-days if I can not get a chance to pursue PhD.</p>
<p>Review the past yesr, I still have a lot of things to do but in fact I did not complete them. So in this year I will try my best to complete what I should have complete in 2016.</p>
<p>First is Tofel. If you do read what I have written above, you will know my English skil need be improved. So I set a aim that to score at least 90 points in Tofel. To realize this, I will spend 2 hours to study English every day. Include reading, listening and speaking.</p>
<p>Second is technique in computer science. There still lots of knowledge I have to study like Compiler-Engineer, Crypto-and-Decrypto, Security and Algorithms. It may be boring to study these, but I will complete  them, and I must will.</p>
<p>And the last is to have a girl friend. Yeah, may it is a dream, but may there will be a beauty like me in this year.:)</p>
<p>In the end, thank you for reading the so called English article I written above. Hope u a happy Chinese New Year, no matter whether u are a Chinese or a foreigner.:)</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;TL-DR&quot;&gt;&lt;a href=&quot;#TL-DR&quot; class=&quot;headerlink&quot; title=&quot;TL;DR&quot;&gt;&lt;/a&gt;TL;DR&lt;/h1&gt;&lt;p&gt;Below is written by a man that with poor English skills. R
    
    </summary>
    
      <category term="Life" scheme="http://blog.exiahan.com/categories/Life/"/>
    
    
      <category term="Happy New Year" scheme="http://blog.exiahan.com/tags/Happy-New-Year/"/>
    
      <category term="LifeContinues" scheme="http://blog.exiahan.com/tags/LifeContinues/"/>
    
  </entry>
  
  <entry>
    <title>Android AntiDebug and Signature Verify Example</title>
    <link href="http://blog.exiahan.com/2016/01/09/Android-AntiDebug-and-Signature-Verify-Example/"/>
    <id>http://blog.exiahan.com/2016/01/09/Android-AntiDebug-and-Signature-Verify-Example/</id>
    <published>2016-01-09T13:44:08.000Z</published>
    <updated>2016-01-11T09:59:05.414Z</updated>
    
    <content type="html"><![CDATA[<p>Reference:<a href="http://blog.csdn.net/grafx/article/details/40403577" target="_blank" rel="external">grafx</a>, <a href="http://burningcodes.net/%E7%94%A8jni%E5%AE%9E%E7%8E%B0apk%E7%9A%84%E5%8F%8D%E8%B0%83%E8%AF%95/" target="_blank" rel="external">IT Dreamer</a></p>
<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>We can use lots of tools like apktool, baksmali, dex2jar to convert a android app to java source code easily. So now most of our developers will put the core-function in the native level(with C/C++ code) because the arm-assembly language or C pseudo code are more difficult to read than java.<br>But others can still read the native code if they really want, they can use IDA to read .so files and debug our apps dynamicly. In order to make our apps difficultly to debug dynamicly, we may will need to add some methods that can provide antidebug functions for us.</p>
<p>This aritcle will provide a simple example about how to antidebug and the sinature-verify.</p>
<p><em>PS: Recently I am helping my teacher to prepare a Android-Security Course, so I feel it is time to record something, and</em> <strong>Sorry for my poor English. (: but I think write article in English is the fast way to help me to improve my English.</strong></p>
<h1 id="Sinature-Verify"><a href="#Sinature-Verify" class="headerlink" title="Sinature Verify"></a>Sinature Verify</h1><h2 id="Java-Level"><a href="#Java-Level" class="headerlink" title="Java Level"></a>Java Level</h2><p>When we publish our apps to the app-store, we will sign apps with our private key, and put the public key into our apps, if others modify our apps, he will re-sign the apps and the public key will be changed, so we can add some code into our apps to check the sinature, if it is not same with ourselves public keys, we can let the apps to exit to prevent the modified apps do something that is harmful to users.<br>Below is the code in java level:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CheckSign</span> </span>&#123;</div><div class="line">    Context context;</div><div class="line">    PackageManager packageManager;</div><div class="line">    String strPackagename;</div><div class="line">    <span class="keyword">byte</span>[] byteSign;</div><div class="line">    String strSign;</div><div class="line">    Signature[] signatureArray;</div><div class="line"></div><div class="line">    CheckSign(Context context)&#123;</div><div class="line">        <span class="keyword">this</span>.context = context;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">checkSignNative</span><span class="params">(Context context)</span></span>;</div><div class="line">    <span class="comment">//The arguement is your public key's value that is deal with md5 and base64</span></div><div class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">checkSign</span><span class="params">(String strOriSign)</span></span>&#123;</div><div class="line">        checkSignNative(<span class="keyword">this</span>.context);</div><div class="line">        <span class="keyword">try</span>&#123;</div><div class="line">            packageManager = <span class="keyword">this</span>.context.getPackageManager();</div><div class="line">            strPackagename = <span class="keyword">this</span>.context.getPackageName();</div><div class="line">            signatureArray = <span class="keyword">this</span>.packageManager.getPackageInfo(strPackagename, PackageManager.GET_SIGNATURES).signatures;</div><div class="line"></div><div class="line">            <span class="comment">/*Improper validation of app signatures could lead to</span></div><div class="line">             *issues where a malicious app submits itself to the</div><div class="line">             * Play Store with both its real certificate and a</div><div class="line">             * fake certificate and gains access to functionality</div><div class="line">             * or information it shouldn't have due to another</div><div class="line">             * application only checking for the fake certificate</div><div class="line">             * and ignoring the rest. Please make sure to validate</div><div class="line">             * all signatures returned by this method.</div><div class="line">             * */</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; signatureArray.length; i++) &#123;</div><div class="line">                Log.v(<span class="string">"Verbose: "</span>, <span class="string">"Check Signatures"</span>);</div><div class="line">                byteSign = signatureArray[i].toByteArray();</div><div class="line">                byteSign = CertificateFactory.getInstance(<span class="string">"X509"</span>).generateCertificate(<span class="keyword">new</span> ByteArrayInputStream(byteSign)).getEncoded();</div><div class="line">                strSign = <span class="keyword">new</span> String(Base64.encode(MessageDigest.getInstance(<span class="string">"md5"</span>).digest(byteSign), <span class="number">19</span>));</div><div class="line">                <span class="comment">//strSign = Base64.encodeToString(MessageDigest.getInstance("md5").digest(byteSign), 19));</span></div><div class="line">                <span class="keyword">if</span> (!strOriSign.equals(strSign)) &#123;</div><div class="line">                    Log.e(<span class="string">"Error: "</span>, <span class="string">"Fake Signature"</span>);</div><div class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span></div><div class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</div><div class="line">            Log.e(<span class="string">"Error: "</span>, <span class="string">"CheckSign Failed"</span> + e.toString());</div><div class="line">            System.exit(-<span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>The java code above will do the sinature verify in java level. As what we have metioned, it is easy to be pathed by modify the smali file. So the more safy way is to do it in a .so file, which is so-called “native level”.</p>
<h2 id="Sinature-Verify-via-C"><a href="#Sinature-Verify-via-C" class="headerlink" title="Sinature Verify via C"></a>Sinature Verify via C</h2><p>To do it, we should add some code in our java code, and be careful, what this example do is simple add a native funciton that will only do the sign-check, this can be patched easily by modify the smali, too. So in the real env we should merge the code to our core-function, that means if we patched the native method call in java level, the app won’t work.<br>Below code will return the signature, you can do the verify after you get the sinature easily:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//Return the String, which is generated via base64(md5(signature));</span></div><div class="line"><span class="function"><span class="keyword">char</span> *<span class="title">getSignature</span><span class="params">(JNIEnv* env, jobject obj)</span></span></div><div class="line">&#123;</div><div class="line">    jstring jstringSign;</div><div class="line">    jbyte *byteSign;</div><div class="line">    <span class="keyword">char</span> *strSign;</div><div class="line">    <span class="comment">// 获得Context类</span></div><div class="line">    jclass cls = (*env)-&gt;GetObjectClass(env, obj);</div><div class="line">    <span class="comment">// 得到getPackageManager方法的ID</span></div><div class="line">    jmethodID mid = (*env)-&gt;GetMethodID(env, cls, <span class="string">"getPackageManager"</span>, <span class="string">"()Landroid/content/pm/PackageManager;"</span>);</div><div class="line"></div><div class="line">    <span class="comment">// 获得应用包的管理器</span></div><div class="line">    jobject pm = (*env)-&gt;CallObjectMethod(env, obj, mid);</div><div class="line"></div><div class="line">    <span class="comment">// 得到getPackageName方法的ID</span></div><div class="line">    mid = (*env)-&gt;GetMethodID(env, cls, <span class="string">"getPackageName"</span>, <span class="string">"()Ljava/lang/String;"</span>);</div><div class="line">    <span class="comment">// 获得当前应用包名</span></div><div class="line">    jstring packageName = (jstring)(*env)-&gt;CallObjectMethod(env, obj, mid);</div><div class="line"></div><div class="line">    <span class="comment">// 获得PackageManager类</span></div><div class="line">    cls = (*env)-&gt;GetObjectClass(env, pm);</div><div class="line">    <span class="comment">// 得到getPackageInfo方法的ID</span></div><div class="line">    mid  = (*env)-&gt;GetMethodID(env, cls, <span class="string">"getPackageInfo"</span>, <span class="string">"(Ljava/lang/String;I)Landroid/content/pm/PackageInfo;"</span>);</div><div class="line">    <span class="comment">// 获得应用包的信息</span></div><div class="line">    jobject packageInfo = (*env)-&gt;CallObjectMethod(env, pm, mid, packageName, <span class="number">0x40</span>); <span class="comment">//GET_SIGNATURES = 64;</span></div><div class="line">    <span class="comment">// 获得PackageInfo 类</span></div><div class="line">    cls = (*env)-&gt;GetObjectClass(env, packageInfo);</div><div class="line">    <span class="comment">// 获得签名数组属性的ID</span></div><div class="line">    jfieldID fid = (*env)-&gt;GetFieldID(env, cls, <span class="string">"signatures"</span>, <span class="string">"[Landroid/content/pm/Signature;"</span>);</div><div class="line">    <span class="comment">// 得到签名数组</span></div><div class="line">    jobjectArray signatures = (jobjectArray)(*env)-&gt;GetObjectField(env, packageInfo, fid);</div><div class="line">    <span class="comment">// 得到签名</span></div><div class="line">    jobject sign = (*env)-&gt;GetObjectArrayElement(env, signatures, <span class="number">0</span>);</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">// 获得Signature类</span></div><div class="line">    cls = (*env)-&gt;GetObjectClass(env, sign);</div><div class="line">    <span class="comment">//得到ByteSign</span></div><div class="line">    mid = (*env)-&gt;GetMethodID(env, cls, <span class="string">"toByteArray"</span>, <span class="string">"()[B"</span>);</div><div class="line">    byteSign = (*env)-&gt;CallObjectMethod(env, sign, mid);</div><div class="line"></div><div class="line">    <span class="comment">//根据Byte生成md5消息摘要</span></div><div class="line">    cls  = (*env)-&gt;FindClass(env, <span class="string">"java/security/MessageDigest"</span>);</div><div class="line">    mid = (*env)-&gt;GetStaticMethodID(env, cls, <span class="string">"getInstance"</span>, <span class="string">"(Ljava/lang/String;)Ljava/security/MessageDigest;"</span>);</div><div class="line">    jobject jmd5 = (*env)-&gt;CallStaticObjectMethod(env, cls, mid, (*env)-&gt;NewStringUTF(env, <span class="string">"md5"</span>));</div><div class="line">    mid = (*env)-&gt;GetMethodID(env, cls, <span class="string">"update"</span>, <span class="string">"([B)V"</span>);</div><div class="line">    (*env)-&gt;CallVoidMethod(env, jmd5, mid, byteSign);</div><div class="line">    mid = (*env)-&gt;GetMethodID(env, cls, <span class="string">"digest"</span>, <span class="string">"()[B"</span>);</div><div class="line">    <span class="comment">//md5散列后的byte[]</span></div><div class="line">    byteSign = (*env)-&gt;CallObjectMethod(env, jmd5, mid);</div><div class="line"></div><div class="line">    <span class="comment">//生成Base64后的String</span></div><div class="line">    cls = (*env)-&gt;FindClass(env, <span class="string">"android/util/Base64"</span>);</div><div class="line">    mid = (*env)-&gt;GetStaticMethodID(env, cls, <span class="string">"encodeToString"</span>, <span class="string">"([BI)Ljava/lang/String;"</span>);</div><div class="line">    <span class="comment">//得到base64后的String</span></div><div class="line">    jstringSign = (*env)-&gt;CallStaticObjectMethod(env, cls, mid, byteSign, <span class="number">19</span>);</div><div class="line">    strSign = (*env)-&gt;GetStringUTFChars(env, jstringSign, <span class="literal">NULL</span>);</div><div class="line">    <span class="comment">//LOGW("%s", strSign);</span></div><div class="line"></div><div class="line">    <span class="keyword">return</span> strSign;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>The code above will call the java function via relfcetion, and the second arguement is a Context object that can be passed by declare a java method like<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">native</span> [Return Type] FunctionName(Context, ...);</div></pre></td></tr></table></figure></p>
<h1 id="Antidebug"><a href="#Antidebug" class="headerlink" title="Antidebug"></a>Antidebug</h1><p>Simplly, we can start a new process via the fork(), the new process will check the parent’s <strong>/proc/[PID]/status</strong> file to see whether the <strong>TracerPid</strong> is 0, if not, kill the parent and then exit. Also, we should prevent others to debug the child process via dynamic debuging, we can let the child process <a href="https://en.wikipedia.org/wiki/Ptrace" target="_blank" rel="external"><strong>ptrace</strong></a> itself.</p>
<p>The code below will provide antidebug function:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">antiDebug</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">const</span> <span class="keyword">int</span> bufsize = <span class="number">1024</span>;</div><div class="line">    <span class="keyword">char</span> filename[bufsize];</div><div class="line">    <span class="keyword">char</span> line[bufsize];</div><div class="line">    <span class="keyword">int</span> pid = getpid();</div><div class="line">    <span class="built_in">sprintf</span>(filename, <span class="string">"/proc/%d/status"</span>, pid);</div><div class="line">    FILE* fd;</div><div class="line">    <span class="comment">//Child Proc check the parent's status</span></div><div class="line">    <span class="keyword">if</span> (fork() == <span class="number">0</span>) &#123;</div><div class="line">        <span class="keyword">int</span> pt;</div><div class="line">        pt = ptrace(PTRACE_TRACEME, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>); <span class="comment">//Child Proc anti ptrace</span></div><div class="line">        <span class="keyword">while</span> (<span class="number">1</span>) &#123;</div><div class="line">            fd = fopen(filename, <span class="string">"r"</span>);</div><div class="line">            <span class="keyword">if</span> (fd != <span class="literal">NULL</span>) &#123;</div><div class="line">                <span class="keyword">while</span> (fgets(line, bufsize, fd)) &#123;</div><div class="line">                    <span class="keyword">if</span> (<span class="built_in">strncmp</span>(line, <span class="string">"TracerPid"</span>, <span class="number">9</span>) == <span class="number">0</span>) &#123;</div><div class="line">                        <span class="keyword">int</span> statue = atoi(&amp;line[<span class="number">10</span>]);</div><div class="line">                        <span class="keyword">if</span> (statue != <span class="number">0</span>) &#123;</div><div class="line">                            fclose(fd);</div><div class="line">                            <span class="keyword">int</span> ret = kill(pid, SIGKILL);</div><div class="line">                            <span class="built_in">exit</span>(<span class="number">-1</span>);</div><div class="line">                        &#125;</div><div class="line">                        <span class="keyword">break</span>;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">                fclose(fd);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> &#123;</div><div class="line">				;</div><div class="line">            &#125;</div><div class="line">            sleep(<span class="number">100</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>To do something more, you can also create a marco which will do<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">fd = fopen(filename, <span class="string">"r"</span>);</div><div class="line">   <span class="keyword">if</span> (fd != <span class="literal">NULL</span>) &#123;</div><div class="line">   	<span class="keyword">while</span> (fgets(line, bufsize, fd)) &#123;</div><div class="line">       	<span class="keyword">if</span> (<span class="built_in">strncmp</span>(line, <span class="string">"TracerPid"</span>, <span class="number">9</span>) == <span class="number">0</span>) &#123;</div><div class="line">           	<span class="keyword">int</span> statue = atoi(&amp;line[<span class="number">10</span>]);</div><div class="line">           	<span class="keyword">if</span> (statue != <span class="number">0</span>) &#123;</div><div class="line">           		fclose(fd);</div><div class="line">           		<span class="keyword">int</span> ret = kill(pid, SIGKILL);</div><div class="line">          		 	<span class="built_in">exit</span>(<span class="number">-1</span>);</div><div class="line">          		&#125;</div><div class="line">           	<span class="keyword">break</span>;</div><div class="line">           &#125;</div><div class="line">	&#125;</div><div class="line">   &#125;</div><div class="line">fclose(fd);</div></pre></td></tr></table></figure></p>
<p>and put it in a lot of places in your c source code, to add the difficulty of reversing apps.</p>
<h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>In this article we provide a simple example about antidebug and signCheck, it can not prevent others to reverse our apps completely, but it can add the difficulty in reversing. Hope this article can help someone. :)</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Reference:&lt;a href=&quot;http://blog.csdn.net/grafx/article/details/40403577&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;grafx&lt;/a&gt;, &lt;a href=&quot;http://burning
    
    </summary>
    
      <category term="Android" scheme="http://blog.exiahan.com/categories/Android/"/>
    
    
      <category term="AntiDebug" scheme="http://blog.exiahan.com/tags/AntiDebug/"/>
    
      <category term="Signature Verify" scheme="http://blog.exiahan.com/tags/Signature-Verify/"/>
    
  </entry>
  
  <entry>
    <title>IDF.CN Practice 01</title>
    <link href="http://blog.exiahan.com/2015/12/30/IDF-CN-Practice-01/"/>
    <id>http://blog.exiahan.com/2015/12/30/IDF-CN-Practice-01/</id>
    <published>2015-12-30T14:12:08.000Z</published>
    <updated>2017-01-29T19:41:44.300Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0x1-Preparation"><a href="#0x1-Preparation" class="headerlink" title="0x1 Preparation"></a>0x1 Preparation</h1><p>既然决定要做，那就加油，写在开头，打好基础，加油吧。<br>Exia，斩获未来。。</p>
<h1 id="0x2-Start"><a href="#0x2-Start" class="headerlink" title="0x2 Start"></a>0x2 Start</h1><h2 id="一、牛刀小试"><a href="#一、牛刀小试" class="headerlink" title="一、牛刀小试"></a>一、牛刀小试</h2><h3 id="被改错的密码"><a href="#被改错的密码" class="headerlink" title="被改错的密码"></a>被改错的密码</h3><p>从前有一个熊孩子入侵了一个网站的数据库，找到了管理员密码，手一抖在数据库中修改了一下，现在的密码变成了 cca9cc444e64c8116a30la00559c042b4，那个熊孩子其实就是我！肿么办求解！在线等，挺急的。。</p>
<p><em>看起来挺像md5,直接拿去在线破，结果提示有问题，再一看，长度有问题，md5是32位哈希，这玩意33位，用python生成去掉其中某个字符的序列，然后再一个个在线破，发现是<strong>cca9cc444e64c8116a30a00559c042b4</strong>，解出来是idf，所以flag是wctf{idf}</em></p>
<hr>
<h3 id="啥"><a href="#啥" class="headerlink" title="啥"></a>啥</h3><p>题目就是一张图片，bless打开看hex，在底部找到flag：wctf{mianwubiaoqing__}</p>
<hr>
<h3 id="ASCII码而已"><a href="#ASCII码而已" class="headerlink" title="ASCII码而已"></a>ASCII码而已</h3><p>明显一看是unicode，找个在线转换，flag为wctf{moremore_weibo_fans}</p>
<hr>
<h3 id="摩斯密码"><a href="#摩斯密码" class="headerlink" title="摩斯密码"></a>摩斯密码</h3><p>一段morsecode<br>–  —  .-.  …  . -.-.  —  -..  .<br>在线解一下，flag为wctf{morsecode}</p>
<hr>
<h3 id="聪明的小羊"><a href="#聪明的小羊" class="headerlink" title="聪明的小羊"></a>聪明的小羊</h3><p><em>一只小羊跳过了栅栏，两只小样跳过了栅栏，一坨小羊跳过了栅栏…<br>tn c0afsiwal kes,hwit1r  g,npt  ttessfu}ua u  hmqik e {m,  n huiouosarwCniibecesnren.</em></p>
<p>看题目就想到古典加密，既然是栅栏，那就栅栏密码吧，正好带学一下栅栏密码，就写了个python的加解码脚本，跑一下看到flag:wctf{C01umnar}</p>
<h2 id="二、包罗万象-MISC"><a href="#二、包罗万象-MISC" class="headerlink" title="二、包罗万象 MISC"></a>二、包罗万象 MISC</h2><h3 id="图片里的英语"><a href="#图片里的英语" class="headerlink" title="图片里的英语"></a>图片里的英语</h3><p>给了一张小李，binwalk一下。看到有个rar，dd提取出来，解压，得到一长flag，恩，没错，就是那张赵本山的图片，may the force be with you，然后首字母大写，wctf{Mtfbwy}</p>
<hr>
<h3 id="抓到一只苍蝇"><a href="#抓到一只苍蝇" class="headerlink" title="抓到一只苍蝇"></a>抓到一只苍蝇</h3><p>给了一个pcapng网络dump包，根据他说的内容，和包名带有fly，搜索包内容，找下字符串fly，成功找到，发现是上传了一个附件fly.rar,分成了5个包上传，第一个post指出fly.rar大小为525701，接着5个包都是传向ftn开头服务器，所以猜测是附件内容，前个都是131436大小，最后一个1777，（131436×4 + 1777 - 525701） / 5 = 364，所以每个包开头364部分为分包后的包头，dd导出内容，skip掉头364字节，然后cat成fly.rar，比较下post里给的md5,一样。</p>
<p>解压工具打开，提示文件损坏，看上去因该不是正常的加密，而且也根本没有其他密码的信息，推测可能改了文件头，bless修改加密位（第24个字节改为0x80）：</p>
<p>解压得到一个flag.txt，打开发现不行，binwalk一看是个pe。。。不过里面有png，而且很多60x60的，但有一个280x280的，dd解出来，打开是一张二维码，扫一下，flag为:flag{m1Sc_oxO2_Fly}，不过说没改格式，额，所以应该是wctf{m1Sc_oxO2_Fly}</p>
<h2 id="三、初探乾坤-PPC"><a href="#三、初探乾坤-PPC" class="headerlink" title="三、初探乾坤 PPC"></a>三、初探乾坤 PPC</h2><h3 id="简单编程-字符统计"><a href="#简单编程-字符统计" class="headerlink" title="简单编程-字符统计"></a>简单编程-字符统计</h3><p>给了一串字符串，让统计个数，妥妥的python，count函数直接搞定。直接提交，发现有坑，仔细看了下题目是要求2秒内搞定，那就只能自动接受内容然后发送post请求了</p>
<p>写个python脚本跑一下</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/bin/env python3</span></div><div class="line"><span class="comment">#coding:utf-8</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> requests</div><div class="line"><span class="keyword">import</span> re</div><div class="line"></div><div class="line"><span class="comment">#url and regex for get string to count</span></div><div class="line">url = <span class="string">'http://ctf.idf.cn/game/pro/37/index.php'</span></div><div class="line">regex = <span class="string">r'&lt;hr /&gt;(.+)&lt;hr /&gt;'</span></div><div class="line"></div><div class="line"><span class="comment">#get the string and remember the cookie</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">requestString</span><span class="params">()</span>:</span></div><div class="line">    respon = requests.get(url);</div><div class="line">    strTarget = respon.text</div><div class="line">    strTarget = strTarget.replace(<span class="string">"\n"</span>, <span class="string">""</span>)</div><div class="line">    strTarget = strTarget.replace(<span class="string">"\r"</span>, <span class="string">""</span>)</div><div class="line">    strTarget = strTarget.replace(<span class="string">"\t"</span>, <span class="string">""</span>)</div><div class="line">    webCookie = respon.cookies</div><div class="line">    strTarget = re.findall(regex, strTarget)</div><div class="line">    <span class="keyword">return</span> strTarget, webCookie</div><div class="line"></div><div class="line"><span class="comment">#count the words num</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">genAnwser</span><span class="params">(strTarget)</span>:</span></div><div class="line">    w, o, l, d, y = <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span></div><div class="line"></div><div class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> strTarget:</div><div class="line">        <span class="keyword">if</span> c == <span class="string">"w"</span>:</div><div class="line">            w += <span class="number">1</span></div><div class="line">        <span class="keyword">elif</span> c == <span class="string">"o"</span>:</div><div class="line">            o += <span class="number">1</span></div><div class="line">        <span class="keyword">elif</span> c == <span class="string">"l"</span>:</div><div class="line">            l += <span class="number">1</span></div><div class="line">        <span class="keyword">elif</span> c == <span class="string">"d"</span>:</div><div class="line">            d += <span class="number">1</span></div><div class="line">        <span class="keyword">elif</span> c == <span class="string">"y"</span>:</div><div class="line">            y += <span class="number">1</span></div><div class="line">    strAnwser = str(w) + str(o) + str(l) + str(d) + str(y)</div><div class="line">    <span class="keyword">return</span> strAnwser</div><div class="line"></div><div class="line"><span class="comment">#post the anwser with the cookie we get via requestString()</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">postAnwser</span><span class="params">(strAnwser, webCookie)</span>:</span></div><div class="line">    data = &#123;&#125;</div><div class="line">    data[<span class="string">'anwser'</span>] = strAnwser</div><div class="line">    respon = requests.post(url, data = data, cookies = webCookie)</div><div class="line">    <span class="keyword">print</span> (respon.text)</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    result = requestString()</div><div class="line">    strTarget = result[<span class="number">0</span>][<span class="number">0</span>]</div><div class="line">    webCookie = result[<span class="number">1</span>]</div><div class="line">    strAnwser = genAnwser(strTarget)</div><div class="line">    postAnwser(strAnwser, webCookie)</div></pre></td></tr></table></figure>
<hr>
<h3 id="谁是卧底"><a href="#谁是卧底" class="headerlink" title="谁是卧底"></a>谁是卧底</h3><p>给了一个大文本串，打开看基本上都是乱字符，根据题意，大部分人都市文盲，卧底有点姿势，所以找个字典去统计下出现单词的地方，然后打印出最密集出现的部分，在里面找到</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">bananjpywlqclassifyubcjesqtqyjhazbornndomhfchvlc</div><div class="line">what will you see if you throw the butter out the window</div><div class="line">wzqmtwmyjutipvqetrsshyosypzydevelopponaxoezspdespairkuoqi</div></pre></td></tr></table></figure>
<p>第二行是一句话，字面意思，丟块黄油你会看到啥，当然黄油飞啊，butter fly。。。就是butterfly，所以是wctf{butterfly}</p>
<hr>
<h3 id="Fuck-your-brain"><a href="#Fuck-your-brain" class="headerlink" title="Fuck your brain"></a>Fuck your brain</h3><p>Brain Fuck编码，直接找个在线解析器解析一下OK。<br>WCTF{Br31nF4ck}</p>
<h2 id="倒行逆施"><a href="#倒行逆施" class="headerlink" title="倒行逆施"></a>倒行逆施</h2><hr>
<h3 id="Net逆向第一题"><a href="#Net逆向第一题" class="headerlink" title=".Net逆向第一题"></a>.Net逆向第一题</h3><p>如题目说，应该是个简单的.Net逆向，用ILSpy查看代码，是个典型的des加密，key = “wctf{wol}”<br>iv = “dy_crack}”，然后加密后的结果在base64编码下和已有字符串<strong>fOCPTVF0diO+B0IMXntkPoRJDUj5CCsT</strong>进行比较。<br>根据这个过程逆推即可，写个python脚本跑下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/bin/env python3</span></div><div class="line"><span class="comment">#coding:utf-8</span></div><div class="line"></div><div class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> DES</div><div class="line"><span class="keyword">import</span> base64</div><div class="line"></div><div class="line">key64 = <span class="string">'wctf&#123;wol'</span></div><div class="line">iv64 = <span class="string">'dy_crack'</span></div><div class="line">encryptedString = <span class="string">'fOCPTVF0diO+B0IMXntkPoRJDUj5CCsT'</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">myDecrypt</span><span class="params">(key, iv, arg)</span>:</span></div><div class="line">    k = bytes(key.encode(<span class="string">"ASCII"</span>))</div><div class="line">    i = bytes(iv.encode(<span class="string">"ASCII"</span>))</div><div class="line">    mydes = DES.new(k, DES.MODE_CBC, i)</div><div class="line">    rarg = base64.b64decode(arg.encode(<span class="string">"ASCII"</span>))</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> rarg:</div><div class="line">        print(<span class="string">'0x%x'</span> %i, end= <span class="string">' '</span>)</div><div class="line">    print(end=<span class="string">'\n'</span>)</div><div class="line">    strRes = mydes.decrypt(rarg)</div><div class="line">    print(strRes)</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    myDecrypt(key64, iv64, encryptedString)</div></pre></td></tr></table></figure></p>
<p>最终结果是<strong>wctf{dotnet_crackme1}</strong>， 没怎么写过C#，这里有个坑是C#的createEncrypter()可以接受byte[] iv不为8 bytes，但是python里除了DES.MODE_ECB外都不可以，刚开始用ECB解出来不对，换回ECB会提示iv应该是8 bytes，就猜可能C#有做截断处理？于是把上面代码里的iv64最后的那个’}’去掉，再跑一下果然OK。。当然C#不熟，不知道理解的对不对。。。</p>
<hr>
<h3 id="简单的PE文件逆向"><a href="#简单的PE文件逆向" class="headerlink" title="简单的PE文件逆向"></a>简单的PE文件逆向</h3><p>和题目说的一样，一道简单的PE逆向，首先运行下，命令行输入flag<br>丢ida， shift f12 查看string，有个<br><code>swfxc{gdv}fwfctslydRddoepsckaNDMSRITPNsmr1_=2cdsef66246087138</code>，是个字符数组</p>
<p><img src="/images/idf_cn_practice_1/pe1.jpg" alt="pe1"></p>
<p>查找引用，在<strong>sub_4113A0</strong>里,tab查看反汇编代码，主体是个循环，和输入进行了17次判断，然后再继续用一个if判断5次，只要有一个不同就让v13为1,继而输出<strong>Wrong</strong></p>
<p><img src="/images/idf_cn_practice_1/pe2.jpg" alt="pe2"></p>
<p>继续看循环内如何从字符串数组取值，index通过<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">*(&amp;v14 + i)</div></pre></td></tr></table></figure></p>
<p>来取值，再看函数开头，从v14到v35,刚好有超过17个连续的变量可用，再看前面的代码，有从v14到v35的初始化：</p>
<p><img src="/images/idf_cn_practice_1/pe3.jpg" alt="pe3"></p>
<p>这里把v14到v30的值保存，为<br><strong>(0x1, 0x4, 0xe, 0xa, 0x5, 0x24, 0x17, 0x2a, 0x0d, 0x13, 0x1c, 0x0d, 0x1b, 0x27, 0x30, 0x29, 0x2a)</strong>，<br>因为向下在if里还有5次比较，把这五次的值也保存，<strong>(49, 48, 50, 52, 125)</strong>。<br>接着动态运行确认下，在如下图里的位置下断：</p>
<p><img src="/images/idf_cn_practice_1/pe4.jpg" alt="pe4"></p>
<p>运行几次，查看eax的值，和上面列出的相同，可知上述序列确实是用来从那个字符数组里取值的，所以最后的5次比较也是字符，因为接着v37后是四个chr类型，所以其实真正应该是一个v37[22]的数组。如此依赖用脚本跑一把。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/bin/env python3</span></div><div class="line"><span class="comment">#! -*- coding:utf-8 -*-</span></div><div class="line"></div><div class="line">strSrc = <span class="string">'swfxc&#123;gdv&#125;fwfctslydRddoepsckaNDMSRITPNsmr1_=2cdsef66246087138'</span></div><div class="line"></div><div class="line">numTuple = (<span class="number">0x1</span>, <span class="number">0x4</span>, <span class="number">0xe</span>, <span class="number">0xa</span>, <span class="number">0x5</span>, <span class="number">0x24</span>, <span class="number">0x17</span>, <span class="number">0x2a</span>, <span class="number">0x0d</span>, <span class="number">0x13</span>, <span class="number">0x1c</span>, <span class="number">0x0d</span>, <span class="number">0x1b</span>, <span class="number">0x27</span>, <span class="number">0x30</span>, <span class="number">0x29</span>, <span class="number">0x2a</span>)</div><div class="line"></div><div class="line">numChar = (<span class="number">49</span>, <span class="number">48</span>, <span class="number">50</span>, <span class="number">52</span>, <span class="number">125</span>)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">doTheGenerate</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> numTuple:</div><div class="line">        print(strSrc[i], end=<span class="string">''</span>)</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> numChar:</div><div class="line">        print(chr(i), end=<span class="string">''</span>)</div><div class="line">    print(<span class="string">'\n'</span>)</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    doTheGenerate()</div></pre></td></tr></table></figure>
<p>得到结果wctf{Pe_cRackme1_1024}</p>
<hr>
<h3 id="简单的ELF逆向"><a href="#简单的ELF逆向" class="headerlink" title="简单的ELF逆向"></a>简单的ELF逆向</h3><p>题目给的是一个x86-64的ELF文件，跑一下和简单PE类似，要输入正确的flag，错误就打印”u r wrong。”<br>丢IDA反一下，ida对x64支持不太好，pseudo code显示还有点不爽（–！），不过幸好不太复杂，对着汇编还是能看的:</p>
<p><img src="/images/idf_cn_practice_1/elf1.jpg" alt="elf1"><br><img src="/images/idf_cn_practice_1/elf2.jpg" alt="elf2"></p>
<p>从上图看到v8到v15是8个int64_t的类型，v16是个int32_t，对应汇编用两次mov dword ptr指令初始化每个变量的低4bytes和个高4bytes:</p>
<p><img src="/images/idf_cn_practice_1/elf3.jpg" alt="elf3"><br><img src="/images/idf_cn_practice_1/elf4.jpg" alt="elf4"></p>
<p>接着是程序主体，接受输入，进行判断，如果和要求不符合，v24为1，打印 u r wrong，从伪码可以看出来，输入需要是个长度为22的串，否则会把v24设为1。</p>
<p><img src="/images/idf_cn_practice_1/elf5.jpg" alt="elf5"></p>
<p>接下来看判断部分，和PE的类似，分两部分判定，for循环里判定前17个字符，用于进行判定比较的取值方法如下：</p>
<p><img src="/images/idf_cn_practice_1/elf6.jpg" alt="elf6"></p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">j from <span class="number">0</span> to <span class="number">16</span></div><div class="line">(*((DWORD *)&amp;v8 + j) - <span class="number">1</span>) / <span class="number">2</span></div></pre></td></tr></table></figure>
<p>按照上面方法一次和输入v17[j]里的每个字符比较，这里可以看到已经把从v8开始的这些int64_t的变量看成了一个int32_t数组，刚好v8到v15有8个int64_t，刚好是16个int32_t，在加上最后的v16刚好是17个值，所以，根据上面的截图，这17的用来计算比较值的数据分别为<strong>(0xEF, 0xC7, 0xE9, 0xCD, 0xF7, 0x8B, 0xD9, 0x8D, 0xBF, 0xD9, 0xDD, 0xB1, 0xBF, 0x87, 0xD7, 0xDB, 0xBF)</strong><br>紧接着是在if里进行5次最后的比较，用于比较的值是<strong>(48, 56, 50, 51, 125)</strong><br>综上已经知道flag计算过程，写个脚本跑出来:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/bin/env python3</span></div><div class="line"><span class="comment">#! -*- coding:utf-8 -*-</span></div><div class="line"></div><div class="line">numForCalc = (<span class="number">0xEF</span>, <span class="number">0xC7</span>, <span class="number">0xE9</span>, <span class="number">0xCD</span>, <span class="number">0xF7</span>, <span class="number">0x8B</span>, <span class="number">0xD9</span>, <span class="number">0x8D</span>, <span class="number">0xBF</span>, <span class="number">0xD9</span>, <span class="number">0xDD</span>, <span class="number">0xB1</span>, <span class="number">0xBF</span>, <span class="number">0x87</span>, <span class="number">0xD7</span>, <span class="number">0xDB</span>, <span class="number">0xBF</span>)</div><div class="line">numForLastFive = (<span class="number">48</span>, <span class="number">56</span>, <span class="number">50</span>, <span class="number">51</span>, <span class="number">125</span>)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">genTheFlag</span><span class="params">()</span>:</span></div><div class="line">    resultLst = []</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> numForCalc:</div><div class="line">        resultLst.append(chr((i - <span class="number">1</span>) // <span class="number">2</span>)) <span class="comment">#落地除</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> numForLastFive:</div><div class="line">        resultLst.append(chr(i))</div><div class="line">    print(str(<span class="string">''</span>).join(resultLst))</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    genTheFlag()</div></pre></td></tr></table></figure>
<p>结果是<strong>wctf{ElF_lnX_Ckm_0823}</strong></p>
<hr>
<h3 id="python-ByteCode"><a href="#python-ByteCode" class="headerlink" title="python ByteCode"></a>python ByteCode</h3><p>看题目就知道，工具用上，<strong>uncompyle2</strong>（如果是exe可能还要用<strong>unpy2exe</strong>），得到下面的py脚本代码：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 2015.12.31 18:17:37 CST</span></div><div class="line"><span class="comment">#Embedded file name: d:/idf.py</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">encrypt</span><span class="params">(key, seed, string)</span>:</span></div><div class="line">    rst = []</div><div class="line">    <span class="keyword">for</span> v <span class="keyword">in</span> string:</div><div class="line">        rst.append((ord(v) + seed ^ ord(key[seed])) % <span class="number">255</span>)</div><div class="line">        seed = (seed + <span class="number">1</span>) % len(key)</div><div class="line"></div><div class="line">    <span class="keyword">return</span> rst</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    <span class="keyword">print</span> <span class="string">"Welcome to idf's python crackme"</span></div><div class="line">    flag = input(<span class="string">'Enter the Flag: '</span>)</div><div class="line">    KEY1 = <span class="string">'Maybe you are good at decryptint Byte Code, have a try!'</span></div><div class="line">    KEY2 = [<span class="number">124</span>,</div><div class="line">     <span class="number">48</span>,</div><div class="line">     <span class="number">52</span>,</div><div class="line">     <span class="number">59</span>,</div><div class="line">     <span class="number">164</span>,</div><div class="line">     <span class="number">50</span>,</div><div class="line">     <span class="number">37</span>,</div><div class="line">     <span class="number">62</span>,</div><div class="line">     <span class="number">67</span>,</div><div class="line">     <span class="number">52</span>,</div><div class="line">     <span class="number">48</span>,</div><div class="line">     <span class="number">6</span>,</div><div class="line">     <span class="number">1</span>,</div><div class="line">     <span class="number">122</span>,</div><div class="line">     <span class="number">3</span>,</div><div class="line">     <span class="number">22</span>,</div><div class="line">     <span class="number">72</span>,</div><div class="line">     <span class="number">1</span>,</div><div class="line">     <span class="number">1</span>,</div><div class="line">     <span class="number">14</span>,</div><div class="line">     <span class="number">46</span>,</div><div class="line">     <span class="number">27</span>,</div><div class="line">     <span class="number">232</span>]</div><div class="line">    en_out = encrypt(KEY1, <span class="number">5</span>, flag)</div><div class="line">    <span class="keyword">if</span> KEY2 == en_out:</div><div class="line">        <span class="keyword">print</span> <span class="string">'You Win'</span></div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">print</span> <span class="string">'Try Again !'</span></div><div class="line">+++ okay decompyling crackme.pyc</div><div class="line"><span class="comment"># decompiled 1 files: 1 okay, 0 failed, 0 verify failed</span></div><div class="line"><span class="comment"># 2015.12.31 18:17:37 CST</span></div></pre></td></tr></table></figure></p>
<p>把输入存到flag， 然后通过encrypt(KEY1, 5, flag)加密，再和KEY2进行比较，相同即可，从encrypt()函数可以知道输入和KEY2长度相同，再按照encrypt()的思路反过来算一遍即可。。。<br>结果发现，尼码想简单了。。根本不行。。。怎么算带乱码。。只能爆破了。。。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/bin/env python3</span></div><div class="line"><span class="comment">#! -*- coding:utf-8 -*-</span></div><div class="line"></div><div class="line">KEY1 = <span class="string">'Maybe you are good at decryptint Byte Code, have a try!'</span></div><div class="line">KEY2 = (<span class="number">124</span>, <span class="number">48</span>, <span class="number">52</span>, <span class="number">59</span>, <span class="number">164</span>, <span class="number">50</span>, <span class="number">37</span>, <span class="number">62</span>, <span class="number">67</span>, <span class="number">52</span>, <span class="number">48</span>, <span class="number">6</span>, <span class="number">1</span>, <span class="number">122</span>, <span class="number">3</span>, <span class="number">22</span>, <span class="number">72</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">14</span>, <span class="number">46</span>, <span class="number">27</span>, <span class="number">232</span>)</div><div class="line">SEED = <span class="number">5</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">deCrack</span><span class="params">(KEY1, KEY2, SEED)</span>:</span></div><div class="line">    resultList = []</div><div class="line">    resultStr = <span class="string">''</span></div><div class="line">    tmp = <span class="number">0</span></div><div class="line">    <span class="keyword">for</span> v <span class="keyword">in</span> KEY2:</div><div class="line">        <span class="comment">#尽量缩小范围吧，可见字符是从33到126</span></div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">33</span>, <span class="number">127</span>):</div><div class="line">            <span class="keyword">if</span> v == ((i + SEED ^ ord(KEY1[SEED])) % <span class="number">255</span>):</div><div class="line">                resultList.append(chr(i))</div><div class="line">        SEED = (SEED + <span class="number">1</span>) % len(KEY1)</div><div class="line">    resultStr = resultStr.join(resultList)</div><div class="line">    print()</div><div class="line">    <span class="keyword">return</span> resultStr</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    rst = deCrack(KEY1, KEY2, SEED)</div><div class="line">    print(rst)</div></pre></td></tr></table></figure></p>
<p>拿到flag，<strong>WCTF{ILOVEPYTHONSOMUCH}</strong></p>
<h3 id="BreakPoint"><a href="#BreakPoint" class="headerlink" title="BreakPoint"></a>BreakPoint</h3><p>给了一个ELF32的文件，行为和之前的一样，输入flag，正确即可。<br>丢IDA，程序逻辑很明显：</p>
<ul>
<li>打印提示字符</li>
<li>接收输入</li>
<li>利用提示字符的地址和main的地址计算了一个值放v0和v4</li>
<li>在一个if里进行比较，比较的值都是写死在程序里</li>
</ul>
<p>关键逻辑和对应数据如图：</p>
<p><img src="/images/idf_cn_practice_1/bk1.jpg" alt="bk1"><br><img src="/images/idf_cn_practice_1/bk2.jpg" alt="bk2"><br><img src="/images/idf_cn_practice_1/bk3.jpg" alt="bk3"></p>
<p>ida看下main地址就知道v0的值肯定会在第一个if的do-while里算出来，需要注意的是，这里不能gdb去调试，因为gdb下断是用 int $0x3，软中断的机制是在断点处把代码替换成int $0x3，但是计算的时候会把整个程序从main（<strong>0x80483B0</strong>）到字符串（<strong>0x804872A</strong>）的数据拿来用于计算v0,所以只能把这些数据抠出来单独跑v0的值，跑到后下面就OK了。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">u_int8_t</span> v1[] = &#123;<span class="number">0x55</span>, <span class="number">0x89</span>, <span class="number">0xE5</span>, <span class="number">0x57</span>, <span class="number">0x56</span>, <span class="number">0x53</span>, <span class="number">0x83</span>, <span class="number">0xE4</span>, <span class="number">0xF0</span>, <span class="number">0x83</span>, <span class="number">0xEC</span>, <span class="number">0x20</span>, <span class="number">0xA1</span>, <span class="number">0x00</span>, <span class="number">0x99</span>, <span class="number">0x04</span>, <span class="number">0x08</span>, <span class="number">0xC7</span>, <span class="number">0x04</span>, <span class="number">0x24</span>, <span class="number">0xF0</span>, <span class="number">0x86</span>, <span class="number">0x04</span>, <span class="number">0x08</span>, <span class="number">0x89</span>, <span class="number">0x44</span>, <span class="number">0x24</span>, <span class="number">0x04</span>, <span class="number">0xE8</span>, <span class="number">0x8F</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xC7</span>, <span class="number">0x44</span>, <span class="number">0x24</span>, <span class="number">0x04</span>, <span class="number">0x08</span>, <span class="number">0x99</span>, <span class="number">0x04</span>, <span class="number">0x08</span>, <span class="number">0xC7</span>, <span class="number">0x04</span>, <span class="number">0x24</span>, <span class="number">0x0B</span>, <span class="number">0x87</span>, <span class="number">0x04</span>, <span class="number">0x08</span>, <span class="number">0xE8</span>, <span class="number">0xBB</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0x8B</span>, <span class="number">0x1D</span>, <span class="number">0x00</span>, <span class="number">0x99</span>, <span class="number">0x04</span>, <span class="number">0x08</span>, <span class="number">0x89</span>, <span class="number">0xD8</span>, <span class="number">0x2D</span>, <span class="number">0xB0</span>, <span class="number">0x83</span>, <span class="number">0x04</span>, <span class="number">0x08</span>, <span class="number">0x81</span>, <span class="number">0xFB</span>, <span class="number">0xB0</span>, <span class="number">0x83</span>, <span class="number">0x04</span>, <span class="number">0x08</span>, <span class="number">0x76</span>, <span class="number">0x1C</span>, <span class="number">0xBA</span>, <span class="number">0xB0</span>, <span class="number">0x83</span>, <span class="number">0x04</span>, <span class="number">0x08</span>, <span class="number">0x90</span>, <span class="number">0x89</span>, <span class="number">0xC1</span>, <span class="number">0xC1</span>, <span class="number">0xF9</span>, <span class="number">0x1B</span>, <span class="number">0xC1</span>, <span class="number">0xE0</span>, <span class="number">0x05</span>, <span class="number">0x31</span>, <span class="number">0xC8</span>, <span class="number">0x0F</span>, <span class="number">0xB6</span>, <span class="number">0x0A</span>, <span class="number">0x83</span>, <span class="number">0xC2</span>, <span class="number">0x01</span>, <span class="number">0x31</span>, <span class="number">0xC8</span>, <span class="number">0x39</span>, <span class="number">0xDA</span>, <span class="number">0x75</span>, <span class="number">0xEA</span>, <span class="number">0x89</span>, <span class="number">0xC2</span>, <span class="number">0x32</span>, <span class="number">0x15</span>, <span class="number">0x08</span>, <span class="number">0x99</span>, <span class="number">0x04</span>, <span class="number">0x08</span>, <span class="number">0x3A</span>, <span class="number">0x15</span>, <span class="number">0xF0</span>, <span class="number">0x98</span>, <span class="number">0x04</span>, <span class="number">0x08</span>, <span class="number">0x89</span>, <span class="number">0x44</span>, <span class="number">0x24</span>, <span class="number">0x1C</span>, <span class="number">0x0F</span>, <span class="number">0x85</span>, <span class="number">0x38</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x0F</span>, <span class="number">0xB6</span>, <span class="number">0x54</span>, <span class="number">0x24</span>, <span class="number">0x1D</span>, <span class="number">0x89</span>, <span class="number">0xD1</span>, <span class="number">0x32</span>, <span class="number">0x0D</span>, <span class="number">0x09</span>, <span class="number">0x99</span>, <span class="number">0x04</span>, <span class="number">0x08</span>, <span class="number">0x3A</span>, <span class="number">0x0D</span>, <span class="number">0xF1</span>, <span class="number">0x98</span>, <span class="number">0x04</span>, <span class="number">0x08</span>, <span class="number">0x0F</span>, <span class="number">0x85</span>, <span class="number">0x1F</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x0F</span>, <span class="number">0xB6</span>, <span class="number">0x4C</span>, <span class="number">0x24</span>, <span class="number">0x1E</span>, <span class="number">0x89</span>, <span class="number">0xCB</span>, <span class="number">0x32</span>, <span class="number">0x1D</span>, <span class="number">0x0A</span>, <span class="number">0x99</span>, <span class="number">0x04</span>, <span class="number">0x08</span>, <span class="number">0x3A</span>, <span class="number">0x1D</span>, <span class="number">0xF2</span>, <span class="number">0x98</span>, <span class="number">0x04</span>, <span class="number">0x08</span>, <span class="number">0x0F</span>, <span class="number">0x85</span>, <span class="number">0x06</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x0F</span>, <span class="number">0xB6</span>, <span class="number">0x7C</span>, <span class="number">0x24</span>, <span class="number">0x1F</span>, <span class="number">0x0F</span>, <span class="number">0xB6</span>, <span class="number">0x1D</span>, <span class="number">0x0B</span>, <span class="number">0x99</span>, <span class="number">0x04</span>, <span class="number">0x08</span>, <span class="number">0x31</span>, <span class="number">0xFB</span>, <span class="number">0x3A</span>, <span class="number">0x1D</span>, <span class="number">0xF3</span>, <span class="number">0x98</span>, <span class="number">0x04</span>, <span class="number">0x08</span>, <span class="number">0x0F</span>, <span class="number">0x85</span>, <span class="number">0xEC</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x0F</span>, <span class="number">0xB6</span>, <span class="number">0x1D</span>, <span class="number">0x0C</span>, <span class="number">0x99</span>, <span class="number">0x04</span>, <span class="number">0x08</span>, <span class="number">0x31</span>, <span class="number">0xC3</span>, <span class="number">0x3A</span>, <span class="number">0x1D</span>, <span class="number">0xF4</span>, <span class="number">0x98</span>, <span class="number">0x04</span>, <span class="number">0x08</span>, <span class="number">0x0F</span>, <span class="number">0x85</span>, <span class="number">0xD7</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x0F</span>, <span class="number">0xB6</span>, <span class="number">0x1D</span>, <span class="number">0x0D</span>, <span class="number">0x99</span>, <span class="number">0x04</span>, <span class="number">0x08</span>, <span class="number">0x31</span>, <span class="number">0xD3</span>, <span class="number">0x3A</span>, <span class="number">0x1D</span>, <span class="number">0xF5</span>, <span class="number">0x98</span>, <span class="number">0x04</span>, <span class="number">0x08</span>, <span class="number">0x0F</span>, <span class="number">0x85</span>, <span class="number">0xC2</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x0F</span>, <span class="number">0xB6</span>, <span class="number">0x1D</span>, <span class="number">0x0E</span>, <span class="number">0x99</span>, <span class="number">0x04</span>, <span class="number">0x08</span>, <span class="number">0x31</span>, <span class="number">0xCB</span>, <span class="number">0x3A</span>, <span class="number">0x1D</span>, <span class="number">0xF6</span>, <span class="number">0x98</span>, <span class="number">0x04</span>, <span class="number">0x08</span>, <span class="number">0x0F</span>, <span class="number">0x85</span>, <span class="number">0xAD</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x0F</span>, <span class="number">0xB6</span>, <span class="number">0x1D</span>, <span class="number">0x0F</span>, <span class="number">0x99</span>, <span class="number">0x04</span>, <span class="number">0x08</span>, <span class="number">0x31</span>, <span class="number">0xFB</span>, <span class="number">0x3A</span>, <span class="number">0x1D</span>, <span class="number">0xF7</span>, <span class="number">0x98</span>, <span class="number">0x04</span>, <span class="number">0x08</span>, <span class="number">0x0F</span>, <span class="number">0x85</span>, <span class="number">0x98</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x0F</span>, <span class="number">0xB6</span>, <span class="number">0x1D</span>, <span class="number">0x10</span>, <span class="number">0x99</span>, <span class="number">0x04</span>, <span class="number">0x08</span>, <span class="number">0x31</span>, <span class="number">0xC3</span>, <span class="number">0x3A</span>, <span class="number">0x1D</span>, <span class="number">0xF8</span>, <span class="number">0x98</span>, <span class="number">0x04</span>, <span class="number">0x08</span>, <span class="number">0x0F</span>, <span class="number">0x85</span>, <span class="number">0x83</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x0F</span>, <span class="number">0xB6</span>, <span class="number">0x1D</span>, <span class="number">0x11</span>, <span class="number">0x99</span>, <span class="number">0x04</span>, <span class="number">0x08</span>, <span class="number">0x31</span>, <span class="number">0xD3</span>, <span class="number">0x3A</span>, <span class="number">0x1D</span>, <span class="number">0xF9</span>, <span class="number">0x98</span>, <span class="number">0x04</span>, <span class="number">0x08</span>, <span class="number">0x75</span>, <span class="number">0x72</span>, <span class="number">0x0F</span>, <span class="number">0xB6</span>, <span class="number">0x1D</span>, <span class="number">0x12</span>, <span class="number">0x99</span>, <span class="number">0x04</span>, <span class="number">0x08</span>, <span class="number">0x31</span>, <span class="number">0xCB</span>, <span class="number">0x3A</span>, <span class="number">0x1D</span>, <span class="number">0xFA</span>, <span class="number">0x98</span>, <span class="number">0x04</span>, <span class="number">0x08</span>, <span class="number">0x75</span>, <span class="number">0x61</span>, <span class="number">0x0F</span>, <span class="number">0xB6</span>, <span class="number">0x1D</span>, <span class="number">0x13</span>, <span class="number">0x99</span>, <span class="number">0x04</span>, <span class="number">0x08</span>, <span class="number">0x31</span>, <span class="number">0xFB</span>, <span class="number">0x3A</span>, <span class="number">0x1D</span>, <span class="number">0xFB</span>, <span class="number">0x98</span>, <span class="number">0x04</span>, <span class="number">0x08</span>, <span class="number">0x75</span>, <span class="number">0x50</span>, <span class="number">0x33</span>, <span class="number">0x05</span>, <span class="number">0x14</span>, <span class="number">0x99</span>, <span class="number">0x04</span>, <span class="number">0x08</span>, <span class="number">0x3A</span>, <span class="number">0x05</span>, <span class="number">0xFC</span>, <span class="number">0x98</span>, <span class="number">0x04</span>, <span class="number">0x08</span>, <span class="number">0x75</span>, <span class="number">0x42</span>, <span class="number">0x32</span>, <span class="number">0x15</span>, <span class="number">0x15</span>, <span class="number">0x99</span>, <span class="number">0x04</span>, <span class="number">0x08</span>, <span class="number">0x3A</span>, <span class="number">0x15</span>, <span class="number">0xFD</span>, <span class="number">0x98</span>, <span class="number">0x04</span>, <span class="number">0x08</span>, <span class="number">0x75</span>, <span class="number">0x34</span>, <span class="number">0x32</span>, <span class="number">0x0D</span>, <span class="number">0x16</span>, <span class="number">0x99</span>, <span class="number">0x04</span>, <span class="number">0x08</span>, <span class="number">0x3A</span>, <span class="number">0x0D</span>, <span class="number">0xFE</span>, <span class="number">0x98</span>, <span class="number">0x04</span>, <span class="number">0x08</span>, <span class="number">0x75</span>, <span class="number">0x26</span>, <span class="number">0x89</span>, <span class="number">0xFB</span>, <span class="number">0x32</span>, <span class="number">0x1D</span>, <span class="number">0x17</span>, <span class="number">0x99</span>, <span class="number">0x04</span>, <span class="number">0x08</span>, <span class="number">0x3A</span>, <span class="number">0x1D</span>, <span class="number">0xFF</span>, <span class="number">0x98</span>, <span class="number">0x04</span>, <span class="number">0x08</span>, <span class="number">0x75</span>, <span class="number">0x16</span>, <span class="number">0xC7</span>, <span class="number">0x04</span>, <span class="number">0x24</span>, <span class="number">0x0E</span>, <span class="number">0x87</span>, <span class="number">0x04</span>, <span class="number">0x08</span>, <span class="number">0xE8</span>, <span class="number">0x14</span>, <span class="number">0xFE</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0x8D</span>, <span class="number">0x65</span>, <span class="number">0xF4</span>, <span class="number">0x31</span>, <span class="number">0xC0</span>, <span class="number">0x5B</span>, <span class="number">0x5E</span>, <span class="number">0x5F</span>, <span class="number">0x5D</span>, <span class="number">0xC3</span>, <span class="number">0xC7</span>, <span class="number">0x04</span>, <span class="number">0x24</span>, <span class="number">0x1C</span>, <span class="number">0x87</span>, <span class="number">0x04</span>, <span class="number">0x08</span>, <span class="number">0xE8</span>, <span class="number">0xFE</span>, <span class="number">0xFD</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xEB</span>, <span class="number">0xE8</span>, <span class="number">0x31</span>, <span class="number">0xED</span>, <span class="number">0x5E</span>, <span class="number">0x89</span>, <span class="number">0xE1</span>, <span class="number">0x83</span>, <span class="number">0xE4</span>, <span class="number">0xF0</span>, <span class="number">0x50</span>, <span class="number">0x54</span>, <span class="number">0x52</span>, <span class="number">0x68</span>, <span class="number">0x60</span>, <span class="number">0x86</span>, <span class="number">0x04</span>, <span class="number">0x08</span>, <span class="number">0x68</span>, <span class="number">0x70</span>, <span class="number">0x86</span>, <span class="number">0x04</span>, <span class="number">0x08</span>, <span class="number">0x51</span>, <span class="number">0x56</span>, <span class="number">0x68</span>, <span class="number">0xB0</span>, <span class="number">0x83</span>, <span class="number">0x04</span>, <span class="number">0x08</span>, <span class="number">0xE8</span>, <span class="number">0xFB</span>, <span class="number">0xFD</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xF4</span>, <span class="number">0x90</span>, <span class="number">0x90</span>, <span class="number">0x90</span>, <span class="number">0x90</span>, <span class="number">0x90</span>, <span class="number">0x90</span>, <span class="number">0x90</span>, <span class="number">0x90</span>, <span class="number">0x90</span>, <span class="number">0x90</span>, <span class="number">0xB8</span>, <span class="number">0x07</span>, <span class="number">0x99</span>, <span class="number">0x04</span>, <span class="number">0x08</span>, <span class="number">0x2D</span>, <span class="number">0x04</span>, <span class="number">0x99</span>, <span class="number">0x04</span>, <span class="number">0x08</span>, <span class="number">0x83</span>, <span class="number">0xF8</span>, <span class="number">0x06</span>, <span class="number">0x77</span>, <span class="number">0x02</span>, <span class="number">0xF3</span>, <span class="number">0xC3</span>, <span class="number">0xB8</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x85</span>, <span class="number">0xC0</span>, <span class="number">0x74</span>, <span class="number">0xF5</span>, <span class="number">0x55</span>, <span class="number">0x89</span>, <span class="number">0xE5</span>, <span class="number">0x83</span>, <span class="number">0xEC</span>, <span class="number">0x18</span>, <span class="number">0xC7</span>, <span class="number">0x04</span>, <span class="number">0x24</span>, <span class="number">0x04</span>, <span class="number">0x99</span>, <span class="number">0x04</span>, <span class="number">0x08</span>, <span class="number">0xFF</span>, <span class="number">0xD0</span>, <span class="number">0xC9</span>, <span class="number">0xC3</span>, <span class="number">0x90</span>, <span class="number">0x8D</span>, <span class="number">0x74</span>, <span class="number">0x26</span>, <span class="number">0x00</span>, <span class="number">0xB8</span>, <span class="number">0x04</span>, <span class="number">0x99</span>, <span class="number">0x04</span>, <span class="number">0x08</span>, <span class="number">0x2D</span>, <span class="number">0x04</span>, <span class="number">0x99</span>, <span class="number">0x04</span>, <span class="number">0x08</span>, <span class="number">0xC1</span>, <span class="number">0xF8</span>, <span class="number">0x02</span>, <span class="number">0x89</span>, <span class="number">0xC2</span>, <span class="number">0xC1</span>, <span class="number">0xEA</span>, <span class="number">0x1F</span>, <span class="number">0x01</span>, <span class="number">0xD0</span>, <span class="number">0xD1</span>, <span class="number">0xF8</span>, <span class="number">0x75</span>, <span class="number">0x02</span>, <span class="number">0xF3</span>, <span class="number">0xC3</span>, <span class="number">0xBA</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x85</span>, <span class="number">0xD2</span>, <span class="number">0x74</span>, <span class="number">0xF5</span>, <span class="number">0x55</span>, <span class="number">0x89</span>, <span class="number">0xE5</span>, <span class="number">0x83</span>, <span class="number">0xEC</span>, <span class="number">0x18</span>, <span class="number">0x89</span>, <span class="number">0x44</span>, <span class="number">0x24</span>, <span class="number">0x04</span>, <span class="number">0xC7</span>, <span class="number">0x04</span>, <span class="number">0x24</span>, <span class="number">0x04</span>, <span class="number">0x99</span>, <span class="number">0x04</span>, <span class="number">0x08</span>, <span class="number">0xFF</span>, <span class="number">0xD2</span>, <span class="number">0xC9</span>, <span class="number">0xC3</span>, <span class="number">0x90</span>, <span class="number">0x8D</span>, <span class="number">0xB4</span>, <span class="number">0x26</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x80</span>, <span class="number">0x3D</span>, <span class="number">0x04</span>, <span class="number">0x99</span>, <span class="number">0x04</span>, <span class="number">0x08</span>, <span class="number">0x00</span>, <span class="number">0x75</span>, <span class="number">0x13</span>, <span class="number">0x55</span>, <span class="number">0x89</span>, <span class="number">0xE5</span>, <span class="number">0x83</span>, <span class="number">0xEC</span>, <span class="number">0x08</span>, <span class="number">0xE8</span>, <span class="number">0x7C</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xC6</span>, <span class="number">0x05</span>, <span class="number">0x04</span>, <span class="number">0x99</span>, <span class="number">0x04</span>, <span class="number">0x08</span>, <span class="number">0x01</span>, <span class="number">0xC9</span>, <span class="number">0xF3</span>, <span class="number">0xC3</span>, <span class="number">0x66</span>, <span class="number">0x90</span>, <span class="number">0xA1</span>, <span class="number">0xD0</span>, <span class="number">0x97</span>, <span class="number">0x04</span>, <span class="number">0x08</span>, <span class="number">0x85</span>, <span class="number">0xC0</span>, <span class="number">0x74</span>, <span class="number">0x1E</span>, <span class="number">0xB8</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x85</span>, <span class="number">0xC0</span>, <span class="number">0x74</span>, <span class="number">0x15</span>, <span class="number">0x55</span>, <span class="number">0x89</span>, <span class="number">0xE5</span>, <span class="number">0x83</span>, <span class="number">0xEC</span>, <span class="number">0x18</span>, <span class="number">0xC7</span>, <span class="number">0x04</span>, <span class="number">0x24</span>, <span class="number">0xD0</span>, <span class="number">0x97</span>, <span class="number">0x04</span>, <span class="number">0x08</span>, <span class="number">0xFF</span>, <span class="number">0xD0</span>, <span class="number">0xC9</span>, <span class="number">0xE9</span>, <span class="number">0x79</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xE9</span>, <span class="number">0x74</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0x90</span>, <span class="number">0x90</span>, <span class="number">0x90</span>, <span class="number">0x90</span>, <span class="number">0x55</span>, <span class="number">0x89</span>, <span class="number">0xE5</span>, <span class="number">0x5D</span>, <span class="number">0xC3</span>, <span class="number">0x8D</span>, <span class="number">0x74</span>, <span class="number">0x26</span>, <span class="number">0x00</span>, <span class="number">0x8D</span>, <span class="number">0xBC</span>, <span class="number">0x27</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x55</span>, <span class="number">0x89</span>, <span class="number">0xE5</span>, <span class="number">0x57</span>, <span class="number">0x56</span>, <span class="number">0x53</span>, <span class="number">0xE8</span>, <span class="number">0x4F</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x81</span>, <span class="number">0xC3</span>, <span class="number">0x4D</span>, <span class="number">0x12</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x83</span>, <span class="number">0xEC</span>, <span class="number">0x1C</span>, <span class="number">0xE8</span>, <span class="number">0x9B</span>, <span class="number">0xFC</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0x8D</span>, <span class="number">0xBB</span>, <span class="number">0x04</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0x8D</span>, <span class="number">0x83</span>, <span class="number">0x00</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0x29</span>, <span class="number">0xC7</span>, <span class="number">0xC1</span>, <span class="number">0xFF</span>, <span class="number">0x02</span>, <span class="number">0x85</span>, <span class="number">0xFF</span>, <span class="number">0x74</span>, <span class="number">0x24</span>, <span class="number">0x31</span>, <span class="number">0xF6</span>, <span class="number">0x8B</span>, <span class="number">0x45</span>, <span class="number">0x10</span>, <span class="number">0x89</span>, <span class="number">0x44</span>, <span class="number">0x24</span>, <span class="number">0x08</span>, <span class="number">0x8B</span>, <span class="number">0x45</span>, <span class="number">0x0C</span>, <span class="number">0x89</span>, <span class="number">0x44</span>, <span class="number">0x24</span>, <span class="number">0x04</span>, <span class="number">0x8B</span>, <span class="number">0x45</span>, <span class="number">0x08</span>, <span class="number">0x89</span>, <span class="number">0x04</span>, <span class="number">0x24</span>, <span class="number">0xFF</span>, <span class="number">0x94</span>, <span class="number">0xB3</span>, <span class="number">0x00</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0x83</span>, <span class="number">0xC6</span>, <span class="number">0x01</span>, <span class="number">0x39</span>, <span class="number">0xFE</span>, <span class="number">0x72</span>, <span class="number">0xDE</span>, <span class="number">0x83</span>, <span class="number">0xC4</span>, <span class="number">0x1C</span>, <span class="number">0x5B</span>, <span class="number">0x5E</span>, <span class="number">0x5F</span>, <span class="number">0x5D</span>, <span class="number">0xC3</span>, <span class="number">0x8B</span>, <span class="number">0x1C</span>, <span class="number">0x24</span>, <span class="number">0xC3</span>, <span class="number">0x90</span>, <span class="number">0x90</span>, <span class="number">0x55</span>, <span class="number">0x89</span>, <span class="number">0xE5</span>, <span class="number">0x53</span>, <span class="number">0x83</span>, <span class="number">0xEC</span>, <span class="number">0x04</span>, <span class="number">0xE8</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x5B</span>, <span class="number">0x81</span>, <span class="number">0xC3</span>, <span class="number">0xEC</span>, <span class="number">0x11</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x59</span>, <span class="number">0x5B</span>, <span class="number">0xC9</span>, <span class="number">0xC3</span>, <span class="number">0x00</span>, <span class="number">0x03</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x02</span>, <span class="number">0x00</span>, <span class="number">0x25</span>, <span class="number">0x73</span>, <span class="number">0x0A</span>, <span class="number">0x50</span>, <span class="number">0x6C</span>, <span class="number">0x65</span>, <span class="number">0x61</span>, <span class="number">0x73</span>, <span class="number">0x65</span>, <span class="number">0x20</span>, <span class="number">0x69</span>, <span class="number">0x6E</span>, <span class="number">0x70</span>, <span class="number">0x75</span>, <span class="number">0x74</span>, <span class="number">0x20</span>, <span class="number">0x79</span>, <span class="number">0x6F</span>, <span class="number">0x75</span>, <span class="number">0x72</span>, <span class="number">0x20</span>, <span class="number">0x66</span>, <span class="number">0x6C</span>, <span class="number">0x61</span>, <span class="number">0x67</span>, <span class="number">0x3A</span>, <span class="number">0x00</span>, <span class="number">0x25</span>, <span class="number">0x73</span>, <span class="number">0x00</span>, <span class="number">0x59</span>, <span class="number">0x6F</span>, <span class="number">0x75</span>, <span class="number">0x20</span>, <span class="number">0x61</span>, <span class="number">0x72</span>, <span class="number">0x65</span>, <span class="number">0x20</span>, <span class="number">0x72</span>, <span class="number">0x69</span>, <span class="number">0x67</span>, <span class="number">0x68</span>, <span class="number">0x74</span>, <span class="number">0x00</span>, <span class="number">0x59</span>, <span class="number">0x6F</span>, <span class="number">0x75</span>, <span class="number">0x20</span>, <span class="number">0x61</span>, <span class="number">0x72</span>, <span class="number">0x65</span>, <span class="number">0x20</span>, <span class="number">0x77</span>, <span class="number">0x72</span>, <span class="number">0x6F</span>, <span class="number">0x6E</span>, <span class="number">0x67</span>, <span class="number">0x00</span>, <span class="number">0x7E</span>&#125;;</div><div class="line"></div><div class="line"><span class="keyword">int</span> v0 = <span class="number">0x37A</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> v2 = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">0x37A</span>; i++)&#123;</div><div class="line">        v2 = v1[i];</div><div class="line">        v0 = v2 ^ (v0 &gt;&gt; <span class="number">27</span>) ^ <span class="number">32</span> * v0;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"0x%08X\n"</span>, v0);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>最终拿到<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">v4 = v0 = <span class="number">0x7EEB184F</span></div></pre></td></tr></table></figure></p>
<p>但是用这个值去计算的话发现不对，多跑了几次，结果好像断点数和输入不一样这个值都会变，再看看题目的意思，估计断点不能乱下了。。。那就暴力点，直接patch二进制文件，让程序把值打出来。。。</p>
<p>接下来就是被霍霍成一大坨的if大判定了。。。其实都是写比较，几个函数：</p>
<ul>
<li><strong>PAIR</strong>(word, word) 比较两个16bit的值</li>
<li>BYTE1()～BYTE3() 分别取一个32bit值的第1～3个byte（从0开始，一个32bit的value有0,1,2,3四个byte</li>
</ul>
<p>用来比较的值也知道了，见上面的截图，这里单独按序列出来<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">valueForCmp = (<span class="number">0x5B18</span>, <span class="number">0xBF</span>, <span class="number">0x38</span>, <span class="number">0x34</span>, <span class="number">0x5A</span>, <span class="number">0x99</span>, <span class="number">0x4D</span>, <span class="number">0x2E</span>, <span class="number">0x73</span>, <span class="number">0xBB</span>, <span class="number">0x4E</span>, <span class="number">0x23</span>, <span class="number">0x9F76</span>, <span class="number">0x3</span>)</div></pre></td></tr></table></figure></p>
<p>用来比较的值从地址<strong>0x08049908到0x08049914</strong>，而且0x08049914指向的是个dword，所以实际上是0x14-0x8 + 0x1 + 0x3 = 0x10，即我们要输入的是16个字符</p>
<p>如上，if里的14次比较都都分析的差不多了，下面就好办了，直接脚本跑出来，要注意的就是比较时候的字节序问题了，可以上下两个<strong>valueForCmp</strong>有什么不同<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/bin/env python3</span></div><div class="line"><span class="comment">#! -*- coding:utf-8 -*-</span></div><div class="line"></div><div class="line">valueForCmp = (<span class="number">0x18</span>, <span class="number">0x5B</span>, <span class="number">0xBF</span>, <span class="number">0x38</span>, <span class="number">0x34</span>, <span class="number">0x5A</span>, <span class="number">0x99</span>, <span class="number">0x4D</span>, <span class="number">0x2E</span>, <span class="number">0x73</span>, <span class="number">0xBB</span>, <span class="number">0x4E</span>, <span class="number">0x23</span>, <span class="number">0x76</span>, <span class="number">0x9F</span>, <span class="number">0x3</span>)</div><div class="line">value = (<span class="number">0x4F</span>, <span class="number">0x18</span>, <span class="number">0xEB</span>, <span class="number">0x7e</span>)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">deBreakPoint</span><span class="params">()</span>:</span></div><div class="line">    resList = []</div><div class="line">    resStr = <span class="string">''</span></div><div class="line">    TmpValue = <span class="number">0</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">16</span>):</div><div class="line">        TmpValue = (valueForCmp[i] ^ value[i%<span class="number">4</span>])</div><div class="line">        resList.append(chr(TmpValue))</div><div class="line">    resStr = resStr.join(resList)</div><div class="line">    <span class="keyword">return</span> resStr</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    res = deBreakPoint()</div><div class="line">    print(res)</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;0x1-Preparation&quot;&gt;&lt;a href=&quot;#0x1-Preparation&quot; class=&quot;headerlink&quot; title=&quot;0x1 Preparation&quot;&gt;&lt;/a&gt;0x1 Preparation&lt;/h1&gt;&lt;p&gt;既然决定要做，那就加油，写在开头，打
    
    </summary>
    
      <category term="CTF" scheme="http://blog.exiahan.com/categories/CTF/"/>
    
    
      <category term="idf.cn" scheme="http://blog.exiahan.com/tags/idf-cn/"/>
    
  </entry>
  
  <entry>
    <title>MSC2015 WriteUp</title>
    <link href="http://blog.exiahan.com/2015/10/22/MSC2015-WriteUp/"/>
    <id>http://blog.exiahan.com/2015/10/22/MSC2015-WriteUp/</id>
    <published>2015-10-22T09:45:08.000Z</published>
    <updated>2017-01-29T19:42:00.840Z</updated>
    
    <content type="html"><![CDATA[<p>##第一题：</p>
<p>和去年类似，程序运行后要求输入，输入正确的值才能得到答案，打开DDMS监控，尝试输入字符串查看log并观察其行为，Log里有提示invalid int，说明要求输入的是个int范围内的数。</p>
<p><img src="/images/msc2015/int.jpg" alt="int"></p>
<p>把程序丢到jeb里查看，发现关键函数check无法被解析</p>
<p><img src="/images/msc2015/check1.jpg" alt="check1"></p>
<p>使用<code>apktool d -d</code>反编译查看smali代码，看到反编译出了5万行代码，其中有大量通过动态反射调用的函数，但是调用的都是java库函数，函数名硬编码成Reverse字符串，运行时逆转成真正的函数名。但是猜测既然是输入的数字，应该会有比较，使用<code>apktool b -d</code>重打包，真机运行，使用netbeans动态调试，并且在check方法的所有cmp处下断点，最终在45540行的比较处发现，如果比较结果是不等，那么返回false，如果是true，则通过校验，程序显示蓝色字。</p>
<p><img src="/images/msc2015/check2.jpg" alt="check2"></p>
<p>多次运行，输入不同的数字，发现v10会变化，但是v4是定值，520676，说明v10应该和输入有关，向上找会修改v10的地方，找到第36111行，在此处下断，运行。</p>
<p><img src="/images/msc2015/check3.jpg" alt="check3"></p>
<p>输入123456789，发现第一次断在此处v20值是123456790,继续运行会再次断在此处，如此循环，循环结束后继续运行会跳到关键的比较行，在比较行上有把v6和v4相加存入v4的操作。查找循环的比较条件，可以看到15983行有个v0和v5的比较，其中v5是定值1001,直接修改v0为1001,则最终v4的值不再是520676,同时v10的值也不再是之前输入123456789的值，所以36111行处应该和计算过程相关，是核心过程，继续向上找36111行v20的相关行，找到10832行。</p>
<p><img src="/images/msc2015/check4.jpg" alt="check4"></p>
<p>重新运行程序，输入123456789，程序断在此处是，v10是输入值，v8的值从v0处取得，v0的值变化规律为从1开始递加4,一直到1001,然后15983行的比较生效，跳转，最终运行到关键比较点。<br>使用python脚本计算1到1001的递增为4的累加值，为124750，让程序一直运行到比较点，观察v10的值为123581539，减去124750,刚好为输入。</p>
<p>用v4的值减去124750,得到395926，即为key</p>
<p>##第二题</p>
<p>首先丢到jeb里分析，Ch函数里有个Morse码，解码后是WOJIUSHIDAAN，输入后不对，猜测是个坑。。<br>同时Ch里有做签名校验，重打包时需要patch掉。<br>apktool d -d 反编译，同时修改Ch的smali代码</p>
<figure class="highlight smali"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">116 a=0;//     <span class="comment">#v2=(Reference,Ljava/lang/String;);</span></div><div class="line">117 a=0;//    <span class="built_in"> const-string </span>v1, <span class="string">"WJmkxxkkGnYbExi3dqzeaA"</span></div><div class="line"><span class="keyword">.</span>.....</div><div class="line">120 a=0;//</div><div class="line">121 a=0;//    <span class="built_in"> move-result </span>v1</div><div class="line">122 a=0;//</div><div class="line">123 a=0;//     <span class="comment">#v1=(Boolean);</span></div><div class="line">124 a=0;//    <span class="built_in"> if-eqz </span>v1,<span class="keyword"> :cond_0</span> //需要修改的行</div></pre></td></tr></table></figure>
<p>同时发现有native方法ch用来check，使用ida动态调试，直接闪退，有反调试。静态分析，导出表还有mprotect，同时猜测可能有动态修改执行代码。<br>最终在init_array里找到两个反调试的入口点,1424和3160</p>
<p><img src="/images/msc2015/ddebug1.jpg" alt="ddebug1"></p>
<p>1424和3160里分别有调用到sub_1284和sub_3400，前者很明显去调用fopen读取 proc/pid/status的tracerpid，后者在运行时会被多次调用，包括在动态释放的代码里也会调用，如果返回一个小于0的值，那么会尝试像不可写内存里写值，导致程序崩溃。</p>
<p>使用bless打patch，把1284里的kill调用改为返回0,3400里的返回值改成0,使用的opcode是<strong>00 00 A0 E3 mov R0, #0</strong>，修改后如图：</p>
<p><img src="/images/msc2015/ddebug2.jpg" alt="ddebug2"><br><img src="/images/msc2015/ddebug3.jpg" alt="ddebug3"></p>
<p>重新附加调试器，可以正常调试，在<strong>Java_k2015_a2_Ch_ch</strong>处下断点，让程序继续运行，输入abcdefg，成功断在native函数ch处，运行到sub_1DE0[0x3CBAFDE0]时单步进入，此时可以看到传入参数为输入</p>
<p><img src="/images/msc2015/dyd1.jpg" alt="dyd1"></p>
<p>sub_1DE0中输入给了v1,然后mcpy到v43，最终在两个mprotect（其中有动态修改程序代码），后调用了函数loc_24C8[0x3CBB04C8]，步入前先使用idc脚本dump出来libwbox.so,此时的so里含有24C8的代码，可以用来静态分析，然后步入函数，查看其代码，对输入的字符串做了如下变换：</p>
<p><img src="/images/msc2015/dyd2.jpg" alt="dyd2"></p>
<p>变换后依然有动态修改代码的过程，然后调用loc_14A4[0x3CBAF4A4]，同样调用前dump出来so库，用于静态分析代码算法，在调用前会对输入进行变换，方法是输入的第i个元素的ASCII码加上i再存回数组，此时输入已经变为如下所示：</p>
<p><img src="/images/msc2015/dyd3.jpg" alt="dyd3"></p>
<p>在loc_14A4中会对输入再次变换，最终生成下面提到的16字节数组，计算方式如图：</p>
<p><img src="/images/msc2015/dyd4.jpg" alt="dyd4"></p>
<p>如图，用于计算的数组是[1F BC DA FF E6 4C BC 44  F5 B8 13 C8 EC A8 CD BD],计算方式是第i个元素的ASCII码加上上面对应的第i个数，结果保存为一个16字节数组。</p>
<p>最终在14A4中调用最终的一个动态生成的函数如图：</p>
<p><img src="/images/msc2015/dyd5.jpg" alt="dyd5"></p>
<p>传入的参数是[80 1F 3F 66 4F B7 29 52  05 CA 27 DE 04 C2 E9 DB]</p>
<p><img src="/images/msc2015/dyd6.jpg" alt="dyd6"></p>
<p>同样在调用前dump出来so库，用于分析</p>
<p>分析最终的函数，发现其做了10轮加密，且输入和输出都是16直接数组，根据经验，猜测是AES，问题在于序找密钥，分析代码，发现代码下面有16个字节被引用</p>
<p><img src="/images/msc2015/dyd7.jpg" alt="dyd7"></p>
<p>且参与了运算，所以猜测key是<br><strong>6BCDC67A6B2B7C9D8DA459B1AB9D0680</strong></p>
<p>使用此key，对下面说到的返回的结果进行解密结果相同，这里用到了一个在线解密网站，很好用，推荐一下<a href="http://testprotect.com/appendix/AEScalc" target="_blank" rel="external">http://testprotect.com/appendix/AEScalc</a></p>
<p>调用后函数会返回，返回结果是[0A BF F7 F6 C3 52 F1 21  6C 1E F5 A3 45 DB 32 29]<br>调用返回后再接着会对结果，v56，一个16字节数组进行比较，参与比较的数值是一个硬编码好的16字节数组，值为[5C DA 77 2F A3 C6 3E 39  B6 F0 F3 ED 51 5A 99 86]，如图：</p>
<p><img src="/images/msc2015/dyd8.jpg" alt="dyd8"></p>
<p>对此数组逆向算法，过程如下</p>
<ul>
<li>AES解密</li>
<li>反向loc_14A4的算法</li>
<li>反向loc_24C8的算法</li>
</ul>
<p>代码如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/bin/env python3</span></div><div class="line"></div><div class="line"><span class="string">""" Crack1 Calc"""</span></div><div class="line">i = <span class="number">1</span></div><div class="line">n = <span class="number">0</span></div><div class="line"><span class="keyword">while</span>(i &lt; <span class="number">1001</span>):</div><div class="line">    n += i</div><div class="line">    i += <span class="number">4</span></div><div class="line"></div><div class="line">print(n)</div><div class="line">print(<span class="number">123581539</span> - n)</div><div class="line">print(<span class="number">520676</span> - n)</div><div class="line"></div><div class="line"><span class="string">""" Crack2 Calc"""</span></div><div class="line">src = [<span class="number">0x8a</span>, <span class="number">0x1f</span>, <span class="number">0x4b</span>, <span class="number">0x6e</span>, <span class="number">0x59</span>, <span class="number">0xca</span>, <span class="number">0xf2</span>, <span class="number">0x52</span>, <span class="number">0x05</span>, <span class="number">0xca</span>, <span class="number">0x27</span>, <span class="number">0xde</span>, <span class="number">0x04</span>, <span class="number">0xc2</span>, <span class="number">0xe9</span>, <span class="number">0xdb</span>]</div><div class="line">srcPuls = [<span class="number">0x1F</span>, <span class="number">0xBC</span>, <span class="number">0xDA</span>, <span class="number">0xFF</span>, <span class="number">0xE6</span>, <span class="number">0x4C</span>, <span class="number">0xBC</span>, <span class="number">0x44</span>, <span class="number">0xF5</span>, <span class="number">0xB8</span>, <span class="number">0x13</span>, <span class="number">0xC8</span>, <span class="number">0xEC</span>, <span class="number">0xA8</span>, <span class="number">0xCD</span>, <span class="number">0xBD</span>]</div><div class="line">out1 = []</div><div class="line">out2 = []</div><div class="line"></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(src)):</div><div class="line">    out1.append((src[i] - srcPuls[i]) %<span class="number">256</span>)</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(out1)):</div><div class="line">    out2.append((out1[i] - i))</div><div class="line"></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(out2)):</div><div class="line">    print(chr(out2[i]), end=<span class="string">''</span>)</div><div class="line"></div><div class="line">print(<span class="string">""</span>)</div></pre></td></tr></table></figure>
<p>最终结果是kboloy0</p>
<p>##第三题</p>
<p>唔，给bin爷爷跪了。。。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;##第一题：&lt;/p&gt;
&lt;p&gt;和去年类似，程序运行后要求输入，输入正确的值才能得到答案，打开DDMS监控，尝试输入字符串查看log并观察其行为，Log里有提示invalid int，说明要求输入的是个int范围内的数。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/msc
    
    </summary>
    
      <category term="CTF" scheme="http://blog.exiahan.com/categories/CTF/"/>
    
    
      <category term="MSC2015" scheme="http://blog.exiahan.com/tags/MSC2015/"/>
    
      <category term="WriteUp" scheme="http://blog.exiahan.com/tags/WriteUp/"/>
    
  </entry>
  
  <entry>
    <title>Dump Dex From IJiaMi</title>
    <link href="http://blog.exiahan.com/2015/10/07/Dump-Dex-From-IJiaMi/"/>
    <id>http://blog.exiahan.com/2015/10/07/Dump-Dex-From-IJiaMi/</id>
    <published>2015-10-07T15:20:29.000Z</published>
    <updated>2015-11-12T07:17:53.422Z</updated>
    
    <content type="html"><![CDATA[<p><strong>内容仅供学习讨论</strong><br><strong>参考文档：</strong> <em><a href="http://www.sycode.cn/2015/06/27/%E7%88%B1%E5%8A%A0%E5%AF%86-%E5%8A%A8%E6%80%81%E8%84%B1%E5%A3%B3%E4%B9%8B%E3%80%90%E6%99%BA%E8%83%BD%E8%A7%86%E7%AA%97app%E3%80%91%E8%84%B1%E5%A3%B3%E4%BF%AE%E5%A4%8D/#0x001" target="_blank" rel="external">爱加密动态脱壳</a>，<a href="http://www.cnblogs.com/2014asm/p/4112116.html" target="_blank" rel="external">爱加密动态脱壳法</a>，<a href="http://www.9hao.info/pages/2014/07/qian-tan-androidni-xiang-fen-xi-na-xie-lan-lu-hu" target="_blank" rel="external">浅谈android逆向分析那些拦路虎</a>，<a href="http://burningcodes.net/%E4%BB%8E%E6%BA%90%E7%A0%81%E4%B8%AD%E8%B7%9F%E8%B8%AAdex%E7%9A%84%E5%8A%A0%E8%BD%BD%E6%B5%81%E7%A8%8B/" target="_blank" rel="external">光哥博客</a></em></p>
<p>#0x1 说在开头</p>
<p>现在有很多软件都是有加壳的，作为安全狗肯定要研究研究，从网上找了点资料，然后找了个用IJiaMi加固的顺着做了一下。</p>
<p>#0x2 实验环境</p>
<ul>
<li>Android 真机，Version 4.1.2， with <strong>ROOT &amp; Xposed</strong></li>
<li>某被IJiaMi加固的App</li>
<li>IDA调试器</li>
<li>adb</li>
</ul>
<p>#0x3 过程</p>
<p>下断点：</p>
<ul>
<li>libc.so fgets fopen</li>
<li>libdvm.so _Z21dvmDexFileOpenPartialPKviPP6DvmDex</li>
</ul>
<p>这里关于为何在fgets和fopen上下断点的原因几乎都有说明，是因为加固措施里有反调试，方法是使用子进程检测父进程是否被ptrace（即被调试），如果有则强制关闭说有进程，而检测方法就是读取<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">/</div><div class="line"> |---proc/[pid]/status</div></pre></td></tr></table></figure></p>
<p>对于这个我也写了个，大概实现可以看这里：<a href="https://github.com/ExiaHan/exiahanLib/blob/master/exiahanLib.c" target="_blank" rel="external">getTracerPid</a></p>
<p>文件里的TracerPid行，如果为0说明没有被调试，否则就是调试器的PID<br>所以要在fgets和fopen上下断，找到其打开后获取值的语句，改为0,patch掉反调试</p>
<p><em>真正调试时发现其实不需要每次都patch掉，只要找到用于反调试的子进程，然后直接休眠掉即可，否则如果碰到变态的每隔几秒就检测一次的加固方式，那就只能一直人工patch了┗&lt;(=｀o′=)&gt;┓哼 ┏&lt;(=｀○′=)&gt;┛哼┏&lt;(=｀o′=)&gt;┓哈┗&lt;(=｀O′=)&gt;┛兮！！</em></p>
<p>再下来是<strong>_Z21dvmDexFileOpenPartialPKviPP6DvmDex</strong>，位于libdvm.so，libdvm是library-dalvik-virtual-machine，即dalvik虚拟机的核心所在shared object，其中的<em>_Z21dvmDexFileOpenPartialPKviPP6DvmDex</em>即为运行一个dex前需要调用的<strong>参与打开dex文件</strong>的一个函数，为什么要在这里下断呢？</p>
<p>去源码dalvik文件夹下执行<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">grep -rn dvmDexFileOpen</div></pre></td></tr></table></figure></p>
<p>可以找到dvmDexFileOpenPartial函数，其定义位于./dalvik/vm/DvmDex.h:84，如下：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="number">72</span> <span class="comment">/*</span></div><div class="line">73  * Given a file descriptor for an open "optimized" DEX file, map it into</div><div class="line">74  * memory and parse the contents.</div><div class="line">75  *</div><div class="line">76  * On success, returns 0 and sets "*ppDvmDex" to a newly-allocated DvmDex.</div><div class="line">77  * On failure, returns a meaningful error code [currently just -1].</div><div class="line">78  */</div><div class="line"><span class="number">79</span> <span class="function"><span class="keyword">int</span> <span class="title">dvmDexFileOpenFromFd</span><span class="params">(<span class="keyword">int</span> fd, DvmDex** ppDvmDex)</span></span>;</div><div class="line"><span class="number">80</span> </div><div class="line"><span class="number">81</span> <span class="comment">/*</span></div><div class="line">82  * Open a partial DEX file.  Only useful as part of the optimization process.</div><div class="line">83  */</div><div class="line"><span class="number">84</span> <span class="function"><span class="keyword">int</span> <span class="title">dvmDexFileOpenPartial</span><span class="params">(<span class="keyword">const</span> <span class="keyword">void</span>* addr, <span class="keyword">int</span> len, DvmDex** ppDvmDex)</span></span>;</div><div class="line"><span class="number">85</span> </div><div class="line"><span class="number">86</span> <span class="comment">/*</span></div><div class="line">87  * Free a DvmDex structure, along with any associated structures.</div><div class="line">88  */</div><div class="line"><span class="number">89</span> <span class="function"><span class="keyword">void</span> <span class="title">dvmDexFileFree</span><span class="params">(DvmDex* pDvmDex)</span></span>;</div></pre></td></tr></table></figure></p>
<p>可以看到三个和加载dex（包括odex）的函数都在这里，就像注释说明的，dvmDexFileOpenPartial函数是加载dex文件必须用到的一步，其前两个参数分别是dex文件在内存中的地址和其长度，知道这些后就可以尝试现在这里下断然后尝试dump出来dex文件啦。所以在其中下断，就能找到运行时所加载的真正dex文件，然后使用IDC脚本dump出来即可.</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">auto</span> fp, dexAddress;</div><div class="line">fp = fopen(<span class="string">"C:\\xx.dex"</span>,<span class="string">"wb"</span>);</div><div class="line"><span class="keyword">for</span> (dexAddress = <span class="number">0x3D4AE72C</span>; dexAddress &lt; <span class="number">0x3DB9C098</span>; dexAddress++)</div><div class="line">   fputc(Byte(dexAddress), fp)</div></pre></td></tr></table></figure>
<p><del>脱掉后dex2jar转成jar用jd-gui看下真正的入口Activity，然后baksmali一下，把manifest.xml里的入口改掉，改成真正入口Activity。</del></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;内容仅供学习讨论&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;参考文档：&lt;/strong&gt; &lt;em&gt;&lt;a href=&quot;http://www.sycode.cn/2015/06/27/%E7%88%B1%E5%8A%A0%E5%AF%86-%E5%8A%A8%E6
    
    </summary>
    
      <category term="UnShell" scheme="http://blog.exiahan.com/categories/UnShell/"/>
    
    
      <category term="Reverse" scheme="http://blog.exiahan.com/tags/Reverse/"/>
    
      <category term="Android" scheme="http://blog.exiahan.com/tags/Android/"/>
    
      <category term="Dex" scheme="http://blog.exiahan.com/tags/Dex/"/>
    
  </entry>
  
  <entry>
    <title>SubsTrate with AndroidStudio</title>
    <link href="http://blog.exiahan.com/2015/10/05/SubsTrate-with-AndroidStudio/"/>
    <id>http://blog.exiahan.com/2015/10/05/SubsTrate-with-AndroidStudio/</id>
    <published>2015-10-05T15:37:08.000Z</published>
    <updated>2017-01-29T19:42:27.423Z</updated>
    
    <content type="html"><![CDATA[<p><strong>参考文档：</strong> <em><a href="http://bbs.pediy.com/showthread.php?t=199671" target="_blank" rel="external">看雪</a>，<a href="http://burningcodes.net/cydia-substrate-android-so-hook/" target="_blank" rel="external">光哥博客</a>，<a href="http://drops.wooyun.org/tips/8084" target="_blank" rel="external">乌云知识库</a></em></p>
<p>#0x1 介绍</p>
<p>在家木事，学了下substrate用法，这里记录下～</p>
<p><strong><a href="http://www.cydiasubstrate.com/" target="_blank" rel="external">Substrate</a></strong>是大名鼎鼎的Cydia团队开发的一套框架工具，支持iOS和Android，相比于Xposed而言，Substrate不仅能提供java层函数的Hook，更能对Native层的C函数进行Hook，而且使用上也比Xposed要方便一些，而且官方提供的<strong><em><a href="http://www.cydiasubstrate.com/api/c/" target="_blank" rel="external">文档</a></em></strong>也比较全，查阅也比较方便，本文将实现一个简单的C函数Hook例子。</p>
<p>#0x2 准备工作</p>
<ul>
<li>确保设备已经root，注意，测试发现目前substrate暂不支持Android Lollipop及其更新版本</li>
<li>按照官方说明，下载substrate框架apk并安装，重启设备</li>
<li>下载sdk到本地并解压，官方提供了两种方式<ul>
<li><a href="http://asdk.cydiasubstrate.com/zips/cydia_substrate-r2.zip" target="_blank" rel="external">直接下载</a></li>
<li>通过Android SDK Manager管理下载：<a href="http://www.cydiasubstrate.com/id/73e45fe5-4525-4de7-ac14-6016652cc1b8/" target="_blank" rel="external">说明页面</a></li>
</ul>
</li>
</ul>
<p>#0x3 Substrate with Android Studio</p>
<p>首先还是要吐槽下Android Studio至今对NDK的支持依然不敢恭维，而且一个版本一个config文件夹的本地文件夹命名方式也实在让人实在难受。。<br>言归正传：</p>
<ul>
<li>新建一个工程，名字随意，比如HelloSubstrate</li>
<li>由于是个C函数Hook的例子，所以不需要有activity（其实连java层的源码都不需要</li>
<li>在Project的app文件夹下创建子路径<strong>./lib/armabi/</strong>，把sdk里对应的文件夹下的.so文件丢进去</li>
<li>在src/main下创建子路径<strong>./jni</strong>，创建一个<strong>xxx.cy.cpp</strong>文件用来存放c层源码，同时把substrate.h文件丢进去（注意这里文件名结尾必须是cy.cpp，substrate文档里要求这么做，用于识别—<a href="http://www.cydiasubstrate.com/inject/android/" target="_blank" rel="external">文档</a></li>
<li>在manifest文件里加上权限声明，否则无法正常工作<ul>
<li><strong><em><code>&lt;uses-permission android:name=&quot;cydia.permission.SUBSTRATE&quot;/&gt;</code></em></strong></li>
</ul>
</li>
</ul>
<p>####额外的准备工作</p>
<p>又要吐槽Android Studio了，ndk的整合上十分混乱，到现在为止已经有三种使用ndk的方法了，使用以前的的方法会提示gradle警告，但能通过，不过为了紧跟潮流，这里试用最新的方法，步骤如下：</p>
<ul>
<li>确保你的gradle是最新的</li>
<li>修改./Project/build.gradle的classpath为<ul>
<li><strong><em><code>classpath &#39;com.android.tools.build:gradle-experimental:0.2.0&#39;</code></em></strong></li>
</ul>
</li>
<li>修改./Project/app/build.gradle为如下样式：<strong>注意其中的不同</strong><ul>
<li>apply plugin的模块变了</li>
<li>所有变量都要用 <strong><em>“=”</em></strong> 来赋值，以前可以是<em>“变量名 空格 值”</em>的形式</li>
</ul>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">apply plugin: 'com.android.model.application'</div><div class="line"></div><div class="line">model &#123;</div><div class="line">    android &#123;</div><div class="line">        compileSdkVersion = 23</div><div class="line">        buildToolsVersion = "23.0.2"</div><div class="line">        defaultConfig.with &#123;</div><div class="line">            applicationId = "com.exiahan.hellosubstrate"</div><div class="line">            minSdkVersion.apiLevel = 15</div><div class="line">            targetSdkVersion.apiLevel = 23</div><div class="line">            versionCode = 1</div><div class="line">            versionName = "1.0"</div><div class="line">        &#125;</div><div class="line">        tasks.withType(JavaCompile) &#123;</div><div class="line">            //指定编译JDK版本</div><div class="line">            sourceCompatibility = JavaVersion.VERSION_1_7</div><div class="line">            targetCompatibility = JavaVersion.VERSION_1_7</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    android.buildTypes &#123;</div><div class="line">        release &#123;</div><div class="line">            minifyEnabled = false</div><div class="line">            proguardFiles += file('proguard-rules.pro')</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    android.ndk &#123;</div><div class="line">        moduleName = "cydiaSubstrateHook.cy"</div><div class="line">        ldFlags += "-L./lib/armeabi"</div><div class="line">        ldLibs += "log"</div><div class="line">        ldLibs += "substrate"</div><div class="line">        ldLibs += "substrate-dvm"</div><div class="line">        abiFilters += "armeabi"</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">dependencies &#123;</div><div class="line">    compile fileTree(include: ['*.jar'], dir: 'libs')</div><div class="line">    compile 'com.android.support:appcompat-v7:23.0.0'</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>由于我们生成的hook用apk会在运行时使用substrate框架提供的库函数和log相关函数，所以需要加上动态链接的一些选项，同时按照sdk要求，生成的modulename必须是.cy.so结尾</p>
<p>一切就绪，就可以开始编写小例子了。</p>
<p>在刚刚的jni文件夹里创建cydiaSubstrateHook.cy.cpp文件，内容如下：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// Created by exiahan on 15-10-5.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;android/log.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"substrate.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> TAG <span class="meta-string">"CydiaSubstrate"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LOGI(...) __android_log_print(ANDROID_LOG_INFO,TAG,__VA_ARGS__)<span class="comment">//define LOGI Marco</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> GETLR(store_lr)  \</span></div><div class="line">  __asm__ __volatile__(  \</div><div class="line">    <span class="meta-string">"mov %0, lr\n\t"</span>  \</div><div class="line">    :  <span class="meta-string">"=r"</span>(store_lr)  \</div><div class="line">  )</div><div class="line"></div><div class="line"><span class="comment">//Specify the lib to hook</span></div><div class="line">MSConfig(MSFilterLibrary, <span class="string">"/system/lib/libc.so"</span>)</div><div class="line"></div><div class="line"><span class="keyword">int</span> (* oldfopen)(<span class="keyword">const</span> <span class="keyword">char</span>* path, <span class="keyword">const</span> <span class="keyword">char</span>* mode);</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">newfopen</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* path, <span class="keyword">const</span> <span class="keyword">char</span>* mode)</span> </span>&#123;</div><div class="line">	<span class="keyword">unsigned</span> lr;</div><div class="line">    LOGI(<span class="string">"[I]:newfopen called! -- [%d]"</span>, getpid());</div><div class="line">    GETLR(lr);</div><div class="line">    LOGI(<span class="string">"[I]:BackTrace -- [0x%x]\n"</span>, lr);</div><div class="line">    LOGI(<span class="string">"[I]:File Path -- [%s]"</span>, path);</div><div class="line">    <span class="keyword">return</span> oldfopen(path, mode);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line"> * Substrate entry point</div><div class="line"> */</div><div class="line">MSInitialize</div><div class="line">&#123;</div><div class="line">    <span class="comment">// Let the user know that the extension has been</span></div><div class="line">    <span class="comment">// extension has been registered</span></div><div class="line">    LOGI( <span class="string">"Substrate initialized."</span>);</div><div class="line">    MSImageRef image;</div><div class="line"></div><div class="line">    image = MSGetImageByName(<span class="string">"/system/lib/libc.so"</span>);</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (image != <span class="literal">NULL</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">void</span> * hookfopen=MSFindSymbol(image,<span class="string">"fopen"</span>);</div><div class="line">        <span class="keyword">if</span>(hookfopen==<span class="literal">NULL</span>)</div><div class="line">        &#123;</div><div class="line">            LOGI(<span class="string">"error find fopen "</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> &#123;</div><div class="line">            MSHookFunction(hookfopen,(<span class="keyword">void</span>*)&amp;newfopen,(<span class="keyword">void</span> **)&amp;oldfopen);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> &#123;</div><div class="line">        LOGI(<span class="string">"ERROR FIND LIBC"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>阅读源码，可知Hook过程如下：</p>
<ul>
<li>确定我们要Hook的函数，为其重写一个我们自己的版本，这里选择的是fopen，也是脱壳时通常会注意的函数</li>
<li>使用MSConfig宏指定fopen所在的库libc.so为要hook的库</li>
<li>在MSInitialize初始化函数里执行如下流程：<ul>
<li>MSGetImageByName得到libc.so句柄</li>
<li>MSFindSymbol找到即将被hook的函数fopen的函数指针并存储，以保证在hook后依旧可以正常完成相关功能</li>
<li>MSHookFunction开始hook函数，这时会把原本的fopen的调用地址放到oldopen里，这样在newfopen里调用oldfopen完成真正的fopen功能</li>
</ul>
</li>
</ul>
<p>运行结果如图：</p>
<p><img src="/images/substrate_with_androidstudio/result.jpg" alt="result"></p>
<p>#0x4 总结</p>
<ul>
<li>到现在为止接触了两种用于Hook的框架，相对于Xposed，Substrate在代码注入上更容易操作，而且提供了native层的注入选项，但是相对于xposed现在已经支持Lolipop而言，substrate还停留在dalvik的时代，期待支持lollipop的substrate尽快出现</li>
<li>框架为我们提供了方便，但是阅读他们的文档就能发现归根结底的话都是在对rom做动态修改，最近看到了看雪上的<strong><a href="http://bbs.pediy.com/showthread.php?p=1389779#post1389779" target="_blank" rel="external">DexHunter</a></strong>，十分厉害，大概思路是定制ROM实现脱壳，这样apk做的一些反调试和防注入而言（<em>一些加固方案会自己通过.init方法在本地hook一些libc关键函数</em>）基本上都是小儿科了，准备下个月有空了买个Nexus好好研究下。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;参考文档：&lt;/strong&gt; &lt;em&gt;&lt;a href=&quot;http://bbs.pediy.com/showthread.php?t=199671&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;看雪&lt;/a&gt;，&lt;a href=&quot;http://b
    
    </summary>
    
      <category term="Android" scheme="http://blog.exiahan.com/categories/Android/"/>
    
    
      <category term="Android" scheme="http://blog.exiahan.com/tags/Android/"/>
    
      <category term="Android-Studio" scheme="http://blog.exiahan.com/tags/Android-Studio/"/>
    
      <category term="SubsTrate" scheme="http://blog.exiahan.com/tags/SubsTrate/"/>
    
  </entry>
  
  <entry>
    <title>XDCTF2015 WRITEUP(我才不会说我就做出来一题)</title>
    <link href="http://blog.exiahan.com/2015/10/02/XDCTF-WRITEUP/"/>
    <id>http://blog.exiahan.com/2015/10/02/XDCTF-WRITEUP/</id>
    <published>2015-10-02T15:12:46.000Z</published>
    <updated>2017-01-29T19:42:43.033Z</updated>
    
    <content type="html"><![CDATA[<p>#0x1 给大黑阔们跪了</p>
<p>本来准备出去玩的，结果到家后发现要过两天才有人回来，就趁机做了把XDCTF的线上，结果被虐的北都找不到了，看着6星和Sigma一路突突突，只能膜了。。有思路的一共三题，结果最后只做出来1题。。。另外两题做到一大半怎么也进行不下去了。<br>总体来说虽然没做出来多少，但是感觉XDCTF水平是很高的了，题目也都很虐人（Pia!&lt;(=ｏ ‵-′)ノ☆<br>这里写个备忘，毕竟是一次经历。</p>
<p>#0x2 没写出来但有思路的的</p>
<p>###Reverse 01</p>
<p>一个linux 的elf x64程序，还是挺有意思的，可惜没做出来，逆向功力不够，大概思路：</p>
<ul>
<li>入口函数是函数0x4008e1，里面会有ptrace反调试，然后获取输入<ul>
<li>这里的输入从分析看应该是要解密后面说到的加密方法的</li>
</ul>
</li>
<li>后面的坑就来了，如果顺着0x4008e1走，最后会打印出来”Congratulations? Key is XDCTF{Input}”，一看就不对</li>
<li>继续看，发现有个函数在0x400787,最后也会打印出来一个flag，而且会吧上面的string的“？”换成“！”，所以这个函数才是真正会吐出flag的过程</li>
<li>解体思路应该是修改执行流到这里，但是问题有三个：<ul>
<li>逆向出加密算法</li>
<li>给出能通过的输入</li>
<li>在什么时刻强制从0x4008e1跳到0x400787</li>
</ul>
</li>
<li>因为没搞定上面三个问题，所以没写出来</li>
</ul>
<p><strong>最后说下里面加密会用到字符串*</strong>ZzAwZF9DcjRrM3JfZzBfb24=*，不过加密算法，我就真不想看了。</p>
<p>###Misc 01</p>
<p>这题后来给了tips，也就是org原图。</p>
<ul>
<li>先用stegsolv打开zzzzzzyu.png，跳几个plane后可以看到顶部有个条，原图org.png是没的</li>
<li>用stegsolve两张combine一下，然后sub后发现顶部会出现两像素宽的条状区，里面零星分布一些黑色像素点</li>
<li>导出成bmp，去色成黑白</li>
<li>用python 的PIL库把顶部两行的按照像素输出，白色是0,黑色是1,可以得到如下字符串：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="linediv></pre></td></tr></table></figure>
<p>但是接下来用jpk处理的时候，4bit格式format，然后处理完实在找不到什么特征了。。作罢。。。（o&lt;&lt;(≧口≦)&gt;&gt;o</p>
<p>#0x3 解出来的</p>
<p>嘛，怎么着还是做出来一题的，至少不是鸭蛋，咩哈哈哈哈&lt;(=￣_￣)σ…&lt;( ＿ ＿)ノ｜</p>
<p>给了一个数据文件，file一下识别不了格式，strings也没啥有用信息，bless看的时候发现开头几个字符是VIMG….fat12….VMWare Visual什么的，搜了下，唯独fat12有点信息，但是挂载的话还是会失败。</p>
<p>换用binwalk，可以看到里面有很多东西，但是有两个zip文件，而且最后那个里面有flag.txt，于是把两个都dd出来<br><strong>不过要说的是dd中间那个的时候，如何能精确的dd出来还是听麻烦的，试了好久，dd出来了一个没有多余附加尾部的zip，如果有更好的方法还希望有人留言说下哈</strong></p>
<p>dd出来后有flag的那个，姑且命名为flag.zip有密码，试着去掉密码位后一样不行，说明不是伪加密，再看没加密的那个，姑且命名为x.zip，发现两个都有个readme.txt</p>
<p>用unzip -v查看了下两个的内容，结果两个readme.txt相同诶，于是想到明文破解，把x.zip里除readme.txt外的文件全部删掉，然后用pkcrack大法，大概用法是</p>
<p>pkcrack -c “readme.txt” -p raedme.txt -C flag.zip -P x.zip -d ok.zip</p>
<ul>
<li>-c是指出加密zip里readme.txt的文件结构，从顶层文件夹开始</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">flag.zip</div><div class="line">	|---readme.txt</div><div class="line">	|---flag.txt</div></pre></td></tr></table></figure>
<p>这里flag.zip文件结构如图</p>
<ul>
<li>-p是明文的readme.txt所在位置，防止麻烦都放一块，当前目录下</li>
<li>-C是待破解加密包flag.zip</li>
<li>-P是包含明文readme.txt的无密码zip包x.zip</li>
<li>-d指明破解成功后的明文包输出为ok.zip</li>
</ul>
<p>然后后开跑，大概10分钟搞定，得到无密码包，拿到flag</p>
<p>如图：</p>
<p><img src="/images/xdctf2015/misc21.jpg" alt="misc02.0"><br><img src="/images/xdctf2015/misc22.jpg" alt="misc02.1"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;#0x1 给大黑阔们跪了&lt;/p&gt;
&lt;p&gt;本来准备出去玩的，结果到家后发现要过两天才有人回来，就趁机做了把XDCTF的线上，结果被虐的北都找不到了，看着6星和Sigma一路突突突，只能膜了。。有思路的一共三题，结果最后只做出来1题。。。另外两题做到一大半怎么也进行不下去了。&lt;
    
    </summary>
    
      <category term="CTF" scheme="http://blog.exiahan.com/categories/CTF/"/>
    
    
      <category term="WriteUp" scheme="http://blog.exiahan.com/tags/WriteUp/"/>
    
      <category term="XDCTF2015" scheme="http://blog.exiahan.com/tags/XDCTF2015/"/>
    
  </entry>
  
  <entry>
    <title>NSCTF2015 WriteUp</title>
    <link href="http://blog.exiahan.com/2015/09/25/NSCTF2015-WriteUp/"/>
    <id>http://blog.exiahan.com/2015/09/25/NSCTF2015-WriteUp/</id>
    <published>2015-09-25T12:56:06.000Z</published>
    <updated>2017-01-29T19:42:13.243Z</updated>
    
    <content type="html"><![CDATA[<p><strong>参加了NSCTF线上比赛，感觉自己水平还是有待提高啊，写一下做出来的题目的备忘</strong></p>
<p>#Reverse</p>
<p>###0x1 简单的逆向</p>
<p><strong>题目地址：</strong><a href="http://www.nsctf.net/static/uploads/74ec9621ac5f8573abc90b3fb9199e38/Reverse01.exe" target="_blank" rel="external">Reverse01</a></p>
<ul>
<li>运行程序，出现CLI程序窗口，提示输入密码，随意输入，提示错误。</li>
<li>使用PEID查看，发现加了ASPACK2.12的壳，使用od加载，看到有pushad操作，使用esp方法脱壳</li>
<li><del>不需要完整脱壳，在壳程序运行完，dump程序</del>[此步不是必须，但是可以dump出来后查看源码]</li>
<li>回到od，查找字符串，找到提示的那句<strong>“please input ns-ctf password”</strong>，跳转到引用文字，发现有strcmp比较，比较字符串固定，为<strong>“nsF0cuS!x01”</strong></li>
<li>输入上面的字符串<strong>“nsF0cuS!x01”</strong></li>
<li>单步跟踪，发现有个jle跳转，如果条件满足会跳过一个函数调用，直接printf出来一个有乱码的flag，推测可能之前还有处理</li>
<li>修改jle跳转为改为<strong>“jmp short Reverse0.00401150”</strong>，即调用其本来会通过jle跳过的函数，如图：</li>
</ul>
<p><img src="/images/nsctf2015/re11.jpg" alt="reverse01.0"></p>
<ul>
<li>继续F9运行，程序吐出flag，如图：</li>
</ul>
<p><img src="/images/nsctf2015/re12.jpg" alt="reverse01.1"></p>
<p>###0x2 较简单的逆向</p>
<p><strong>题目地址：</strong><a href="http://www.nsctf.net/static/uploads/806b95d9497584c4a9d89118c8944424/Reverse02.exe" target="_blank" rel="external">Reverse02</a></p>
<p><em>本题和第一题类似，只不过改成了窗口程序</em></p>
<ul>
<li>运行，发现窗口程序</li>
<li>使用OD或者IDA打开</li>
<li>尝试搜索”Flag”，发现有好几个匹配，记下，同时猜测可能和第一题一样有对flag处理</li>
<li>查看导入表，发现是个dialogbox，查找调用，找到<strong>0x00401240</strong>处的DialogBoxParamA调用，从其参数里找到对应回调处理函数入口为<strong>0x00401180</strong></li>
<li>转到<strong>0x00401180</strong>处，发现有个GetDlgItemTextA的调用，在其下有个<strong>call 0x00401070</strong>，猜测会在其中处理Flag，修改程序执行流，让其可以执行，跟踪进入此函数，如图：</li>
</ul>
<p><img src="/images/nsctf2015/re21.jpg" alt="reverse02.0"></p>
<ul>
<li>进入0x00401070后，可以看到上面有个0x00401000的函数，可以看到内部有调用MessageBoxA显示Flag，同时在0x00401070内发现有此函数调用，修改执行流让其可以执行，跟踪进入0x00401000，在MessageBoxA调用前下断，看到真正的flag，如图：</li>
</ul>
<p><img src="/images/nsctf2015/re22.jpg" alt="reverse02.1"></p>
<p>###0x3 逆向</p>
<p><strong>题目地址：</strong><a href="http://www.nsctf.net/static/uploads/877afdad88a2340eaefe8c1a87bb391e/Revesre03.exe" target="_blank" rel="external">Reverse03</a></p>
<p><em>分析：使用python生成的程序，运行时在本地Temp文件夹里释放文件，通过CreateProcessA运行一个新进程来执行，没搞定。。。。。。。。囧。。</em></p>
<p>#MISC</p>
<p>###0x1 Twitter<br><strong>这题，额。。。啧啧。。一个md5,100块钱，不过有人抖了答案出来</strong></p>
<p>###0x2 Wireshark</p>
<p><strong>题目地址：</strong><a href="http://www.nsctf.net/static/uploads/16d8a763795dd8cc3cf5f599fbb5e5af/sniffer.pcapng" target="_blank" rel="external">sniffer.pcapng</a></p>
<p>从题目可以看出来是个抓包题，wireshark打开文件[也可以用Dshell，或者binwalk]</p>
<p><img src="/images/nsctf2015/misc1.jpg" alt="misc02"></p>
<ul>
<li>题目说是下载，猜测在http里，表达式过滤http</li>
<li>看到有个key.rar，服务器为192.168.52.1</li>
<li>dump出key.rar，解压，需要密码</li>
<li>继续查找发现获取rar之前还有个从服务器获取的页面，dump内容保存成html文件，内容有提示密码为nsfocus+5个数字</li>
<li>生成字典，爆破，解压密码为nsfocus56317,打开后获得flag</li>
</ul>
<p>#WEB</p>
<p>###0x1 Be Careful</p>
<p>使用chrome dev tools跟踪页面，发现有个301重定向，猜测可能有个默认的动态页面，尝试index.php，发现确实存在，使用wireshark抓包，看到flag在注释里。</p>
<p><img src="/images/nsctf2015/web1.jpg" alt="web01"></p>
<p>###0x2 Decode</p>
<p>题目里给了个php的函数，接受传入的字符串</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">encode</span><span class="params">($str)</span></span>&#123;</div><div class="line">	$_o = strrev($str);</div><div class="line">	<span class="keyword">for</span>($_0=<span class="number">0</span>;$_0&lt;strlen($_o);$_0++)&#123;</div><div class="line">		$_c = substr($_o,$_0,<span class="number">1</span>);</div><div class="line">		$__ = ord($_c)+<span class="number">1</span>;</div><div class="line">		$_c = chr($__);</div><div class="line">		$_= $_.$_c;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> str_rot13(strrev(base64_encode($_)));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>其作用如下：</p>
<ul>
<li>反转字符串</li>
<li>每个字符对应值加1再转回字符串，即每个字符都变成其后一个字符</li>
<li>得到的新字符串base64编码</li>
<li>编码后再反转</li>
<li>反转后rot13编码得到最终字符串，即题目的</li>
</ul>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">**a1zLbgQsCESEIqRLwuQAyMwLyq2L5VwBxqGA3RQAyumZ0tmMvSGM2ZwB4tws**</div></pre></td></tr></table></figure>
<p>根据上面的分析逆向一次即可得到flag</p>
<p>#CRYPTO</p>
<p>###0x1 神秘的字符串</p>
<p>给了一串字符串（写在比赛结束后，已经看不到了。。），感觉像base64，解一下，发现有Salted_字样的玩意，应该是AES加密，到网上找了个网站解密了一下，结果解出来是flag{字符串}的形式，因为字符串不是NSCTF开头，感觉还有加密，在密码机器网上跑了一下，发现是凯撒移位加密，得到最终flag是NSCTF_Rot_Encryption</p>
<p>###0x2 神奇的图片</p>
<p><strong>题目地址：</strong><a href="http://www.nsctf.net/static/uploads/8041661a723dcc82a8a088163e2cd9ac/oddpic.jpg" target="_blank" rel="external">oddpic.jpg</a></p>
<p>binwalk走一遍，里面有其他的jpeg，dd出来，得到flag</p>
<p><img src="/images/nsctf2015/crypto2.jpg" alt="crypt02"></p>
<p>###0x3 神秘的图片+10086</p>
<p><strong>题目地址：</strong><a href="http://www.nsctf.net/static/uploads/50cf3d7ee75c2bbb7a91808dc811aa24/newnewnew.jpg" target="_blank" rel="external">newnewnew.jpg</a></p>
<p>binwalk走一下没结果，用stegsolv分析下，在blue plane 0通道看到一个颜色反转的二维码，保存出来，用ps等工具反转下颜色，手机扫描，得到flag</p>
<p><img src="/images/nsctf2015/crypto3.jpg" alt="crypt03"></p>
<p><strong>Update:附上官方博客资料，里面有WriteUp，<a href="http://blog.nsfocus.net/nsctf-network-attack-defence-game-download/" target="_blank" rel="external">绿盟博客</a></strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;参加了NSCTF线上比赛，感觉自己水平还是有待提高啊，写一下做出来的题目的备忘&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;#Reverse&lt;/p&gt;
&lt;p&gt;###0x1 简单的逆向&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;题目地址：&lt;/strong&gt;&lt;a href=&quot;http:/
    
    </summary>
    
      <category term="CTF" scheme="http://blog.exiahan.com/categories/CTF/"/>
    
    
      <category term="WriteUp" scheme="http://blog.exiahan.com/tags/WriteUp/"/>
    
      <category term="NSCTF2015" scheme="http://blog.exiahan.com/tags/NSCTF2015/"/>
    
  </entry>
  
  <entry>
    <title>Dice Write Up</title>
    <link href="http://blog.exiahan.com/2015/09/18/Dice-Write-Up/"/>
    <id>http://blog.exiahan.com/2015/09/18/Dice-Write-Up/</id>
    <published>2015-09-18T12:01:27.000Z</published>
    <updated>2017-01-29T19:40:26.264Z</updated>
    
    <content type="html"><![CDATA[<p>#0x1</p>
<p>题目链接：<a href="http://ctf5.simplexue.com/re/Dice.exe" target="_blank" rel="external">Simple-Reverse-Dice</a></p>
<p>#0x2</p>
<p>拿到程序后运行观察其行为，发现是一个Windows CLI程序，运行后提示是按其要求摇骰子，摇出其指定的点数才能进行到下一步，全部正确则吐出Flag，错误则结束。</p>
<p>运行时程序会有一些提示字符串，记下部分，用IDA打开静态分析。</p>
<p>#0x3</p>
<p>使用IDA和Ollydbg进行分析</p>
<ul>
<li>在String Tab中找到对应的String，找到其关联的代码，转成C伪代码分析，可以看到程序是一个WinMain程序，查看其变量，发现有两个<strong>time类型</strong>，推测可能每次摇骰子是随机生成数值。</li>
<li>继续向下，可以看到程序有判断是否有附加调试器：<ul>
<li>isDebugerPresent()函数，标记，使用Ollydbg时要记得修改其值，绕过调试器检测</li>
</ul>
</li>
<li>继续向下走的话，可以看到每次判断都是调用随机数生成函数后存入值到内存地址0x0022FE9C处，然后从此内存取值，依次判断是否是3-1-3-3-7，需要注意的是最后一个判断7的时候没有再生成随机数，所以要在判断前直接修改内存为7</li>
<li><del>再继续，3-1-3-3-7完成后，在显示flag之前，还有一次比较，如果相等会跳到something wrong，所以也要做一次patch</del></li>
<li>仅按照上述内容patch后发现打出的flag是乱码，猜测可能有其他坑，重新浏览代码发现每次判断roll点正确（即3-1-3-3-7）后，还会判断时间差，如果大于2，就会把用来计算flag的值做一次乘2,所以每次比较完后要在比较时间差处也做patch，防止被乘2</li>
<li>最后发现上面最好patch后，加了横线的描述应该不会发生</li>
</ul>
<p>#0x4<br>上述步骤完成，拿到flag，如图：</p>
<p><img src="/images/dice_write_up/flag.jpg" alt="flag"></p>
<p>#0x5</p>
<p>昨晚后光哥给的思路是直接运行前静态改好，然后直接让他跑一下就把flag吐出来了。。。o&lt;&lt;(≧口≦)&gt;&gt;o，炸裂了。。我好蠢。。汪，就这样</p>
<p>顺便把我的暴力方法打的断点图备忘一下：</p>
<p><img src="/images/dice_write_up/breaklist.jpg" alt="break list"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;#0x1&lt;/p&gt;
&lt;p&gt;题目链接：&lt;a href=&quot;http://ctf5.simplexue.com/re/Dice.exe&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Simple-Reverse-Dice&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;#0x2&lt;/p&gt;
&lt;
    
    </summary>
    
      <category term="CTF" scheme="http://blog.exiahan.com/categories/CTF/"/>
    
    
      <category term="CTF" scheme="http://blog.exiahan.com/tags/CTF/"/>
    
      <category term="Reverse" scheme="http://blog.exiahan.com/tags/Reverse/"/>
    
      <category term="SimpleXue" scheme="http://blog.exiahan.com/tags/SimpleXue/"/>
    
  </entry>
  
  <entry>
    <title>Xposed with Android Studio</title>
    <link href="http://blog.exiahan.com/2015/09/02/Xposed-with-Android-Studio/"/>
    <id>http://blog.exiahan.com/2015/09/02/Xposed-with-Android-Studio/</id>
    <published>2015-09-02T08:06:55.000Z</published>
    <updated>2017-01-29T19:42:57.316Z</updated>
    
    <content type="html"><![CDATA[<p>##0x1 介绍<br>Xposed不用说，估计是很多人都知道的神器，通过替换系统文件在zygote(Android应用的孵化器)阶段进行hook，给予了xposed相当于root的权限，使用Xposed来修改修改和定制系统，或者在某些需要的情况下想从一些应用里套点数据，Xposed都是十分在行。<br>本文简单介绍使用Xposed来套取一个示例Android应用中某个函数运行时传入的参数。</p>
<p>##0x2 开工<br><strong>这篇文章也是作为Xposed插桩的练习记录</strong></p>
<p>###引入Xposed框架<br>不得不说，即使有<a href="https://github.com/rovo89" target="_blank" rel="external">rovo89</a>的<a href="https://github.com/rovo89/XposedBridge/wiki/Development-tutorial" target="_blank" rel="external">Xposed Tutorial</a>，Android-Studio到目前为止也并不是很让人能轻松上手，特别是eclipse用惯以后，这里要说明一下如何在Android-Stuio中引入Xposed框架包。</p>
<ul>
<li>下载xposed框架jar包</li>
<li>创建你的xposed module工程，如”HelloXposedHook”</li>
<li>在app/src下创建文件夹xposedLib</li>
</ul>
<hr>
<p>之所以要在这里分开说最后一步，是因为目前我知道的有两种方法引入框架而不在生成时包含</p>
<ul>
<li><strong>方法一：</strong><ul>
<li>把下载好的xposed-bridgeAPI.jar包拖进去，右键，选择add as library</li>
<li>在Project视图下右键项目名，选择open module settings，把xposed-bridgeAPI那一项有compile改成proivde</li>
</ul>
</li>
</ul>
<p>如图：<br><img src="/images/xposed_with_androidstudio/xposedprovide.jpg" alt="xposed provide"></p>
<ul>
<li><strong>方法二：</strong><ul>
<li>把下载好的xposed-bridgeAPI.jar包拖进去</li>
<li>在app/xposedLib/路径里创建build.gradle文件，内容如下</li>
</ul>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">apply plugin: 'java'</div><div class="line">dependencies &#123;</div><div class="line">    compile project(":lib")</div><div class="line">    provided fileTree(dir: 'lib', include: ['*.jar'])</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>根据xposed tutorial的提示，jar包不能放app/libs，否则会自动包含<br>xposed的jar包要求仅被引用，而不能包含<br>所以放xposedLib<br>并且在module settings里把相关项改成provide</p>
</blockquote>
<p><strong>到这里xposed框架的引入即可成功</strong></p>
<p>###创建你的Xposed Module</p>
<ul>
<li>修改AndroidManifest.xml，加入xposed的meta元素（<strong>具体如何参见rovo89的Tutorial</strong>）</li>
</ul>
<p>如下所示：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">application</span></span></div><div class="line">        <span class="attr">android:allowBackup</span>=<span class="string">"true"</span></div><div class="line">        <span class="attr">android:icon</span>=<span class="string">"@mipmap/ic_launcher"</span></div><div class="line">        <span class="attr">android:label</span>=<span class="string">"@string/app_name"</span></div><div class="line">        <span class="attr">android:theme</span>=<span class="string">"@style/AppTheme"</span> &gt;</div><div class="line">        <span class="tag">&lt;<span class="name">meta-data</span></span></div><div class="line">            <span class="attr">android:name</span>=<span class="string">"xposedmodule"</span></div><div class="line">            <span class="attr">android:value</span>=<span class="string">"true"</span> /&gt;</div><div class="line">        <span class="tag">&lt;<span class="name">meta-data</span></span></div><div class="line">            <span class="attr">android:name</span>=<span class="string">"xposeddescription"</span></div><div class="line">            <span class="attr">android:value</span>=<span class="string">"My First Xposed Module for Hook"</span> /&gt;</div><div class="line">        <span class="tag">&lt;<span class="name">meta-data</span></span></div><div class="line">            <span class="attr">android:name</span>=<span class="string">"xposedminversion"</span></div><div class="line">            <span class="attr">android:value</span>=<span class="string">"30"</span> /&gt;</div><div class="line">		<span class="tag">&lt;<span class="name">activity</span></span></div><div class="line">            <span class="attr">android:name</span>=<span class="string">".MainActivity"</span></div><div class="line">            <span class="attr">android:label</span>=<span class="string">"@string/app_name"</span> &gt;</div><div class="line">......</div></pre></td></tr></table></figure></p>
<ul>
<li>创建你的使用xposed插件的函数，如MyXposedModule</li>
<li>添加文件夹/app/src/main/assets/xposed_init，在里面写上你的xposed module类全称（包含包名<ul>
<li>如<strong>com.xxx.helloxposedhook.MyXposedModule</strong></li>
</ul>
</li>
</ul>
<p>这里我要做的是Hook自己写的另一个示例小程序的一个java方法，在log里打印出传给他的参数</p>
<p>功能代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyXposedModule</span> <span class="keyword">implements</span> <span class="title">IXposedHookLoadPackage</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleLoadPackage</span><span class="params">(XC_LoadPackage.LoadPackageParam lpparam)</span> <span class="keyword">throws</span> Throwable </span>&#123;</div><div class="line">        <span class="comment">//TODO Auto-generated method stub</span></div><div class="line">        <span class="comment">//filter the package</span></div><div class="line"></div><div class="line"></div><div class="line">        <span class="keyword">if</span> (!lpparam.packageName.equals(<span class="string">"com.xxx.remotecontrol"</span>))</div><div class="line">            <span class="keyword">return</span>;</div><div class="line"></div><div class="line">        Log.e(<span class="string">"Package"</span>, <span class="string">"\n"</span> + lpparam.packageName + <span class="string">"\n"</span>);</div><div class="line"></div><div class="line">        <span class="comment">//if has a custom class param, use reflact to get the class as type</span></div><div class="line">        <span class="comment">//Class&lt;?&gt; XXXJni = null;</span></div><div class="line">        <span class="comment">//XXXJni = lpparam.classLoader.loadClass("com.xxx.remotecontrol");</span></div><div class="line">        findAndHookMethod(<span class="string">"com.xxx.remotecontrol.mainActivity"</span>, lpparam.classLoader, <span class="string">"forHook"</span>, String.class, <span class="keyword">new</span> XC_MethodHook() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">beforeHookedMethod</span><span class="params">(MethodHookParam param)</span> <span class="keyword">throws</span> Throwable </span>&#123;</div><div class="line">                <span class="comment">// this will be called before the clock was updated by the original method</span></div><div class="line">                String parg = (String) param.args[<span class="number">0</span>];</div><div class="line">                Log.e(<span class="string">"Result:"</span>, <span class="string">"\nHi\n"</span>);</div><div class="line">                Log.e(<span class="string">"CMD:"</span>, parg);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">afterHookedMethod</span><span class="params">(MethodHookParam param)</span> <span class="keyword">throws</span> Throwable </span>&#123;</div><div class="line">                <span class="comment">// this will be called after the clock was updated by the original method</span></div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Hook成功后首先打印Hi，然后打印参数，即CMD后的parg</p>
<p>结果如图：<br><img src="/images/xposed_with_androidstudio/result.jpg" alt="result"></p>
<p><strong>到这里也即完成了xposed module的创建</strong></p>
<p>##0x3 结束<br>这里仅仅作为一个例子. 想继续深入研究的朋友可以去github找一些较大的xposed插件工程源码阅读:).</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;##0x1 介绍&lt;br&gt;Xposed不用说，估计是很多人都知道的神器，通过替换系统文件在zygote(Android应用的孵化器)阶段进行hook，给予了xposed相当于root的权限，使用Xposed来修改修改和定制系统，或者在某些需要的情况下想从一些应用里套点数据，X
    
    </summary>
    
      <category term="Android" scheme="http://blog.exiahan.com/categories/Android/"/>
    
    
      <category term="Android" scheme="http://blog.exiahan.com/tags/Android/"/>
    
      <category term="Android-Studio" scheme="http://blog.exiahan.com/tags/Android-Studio/"/>
    
      <category term="Xposed" scheme="http://blog.exiahan.com/tags/Xposed/"/>
    
  </entry>
  
  <entry>
    <title>ELF_Simple_Shell</title>
    <link href="http://blog.exiahan.com/2015/08/18/ELF-Simple-Shell/"/>
    <id>http://blog.exiahan.com/2015/08/18/ELF-Simple-Shell/</id>
    <published>2015-08-18T04:48:57.000Z</published>
    <updated>2015-08-20T16:46:58.193Z</updated>
    
    <content type="html"><![CDATA[<p>#0x00 前言</p>
<p>之前看了ELF文件的文件格式PDF<a href="http://flint.cs.yale.edu/cs422/doc/ELF_Format.pdf" target="_blank" rel="external">文档</a>，又从<a href="http://bbs.pediy.com/showthread.php?t=191649" target="_blank" rel="external">看雪论坛</a>和<a href="http://www.burningcodes.net/" target="_blank" rel="external">光哥</a>那里看了点so加密的文章，就想试下直接对elf可执行文件加密。现做一点整理和记录，留待备用。</p>
<p>大概流程如下：</p>
<ul>
<li>核心代码放到指定节</li>
<li>.init section 加入解密函数decryptFunc</li>
<li>加密程序读取编译好的elf文件，加密指定节</li>
<li>运行时decryptFunc函数解密核心代码</li>
<li>正确执行</li>
</ul>
<p>#0x01 准备工作</p>
<p>要对ELF可执行文件进行处理，首先需要了解ELF文件格式，具体可见上一篇Po主的渣翻译（<strong>真的很渣，英语老师已气死</strong>），这里对需要用到的地方再进行一次说明：</p>
<p>#####ELF文件格式</p>
<p>ELF文件组织结构如下：</p>
<table>
<thead>
<tr>
<th style="text-align:center">Linker View</th>
<th style="text-align:center">Execution View</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">ELF Header</td>
<td style="text-align:center">ELF Header</td>
</tr>
<tr>
<td style="text-align:center">……</td>
<td style="text-align:center">……</td>
</tr>
<tr>
<td style="text-align:center">Section Header Table</td>
<td style="text-align:center">Section Header Table[Optional]</td>
</tr>
<tr>
<td style="text-align:center">……</td>
<td style="text-align:center">……</td>
</tr>
<tr>
<td style="text-align:center">Program Header Table[Optional]</td>
<td style="text-align:center">Program Header Table</td>
</tr>
<tr>
<td style="text-align:center">……</td>
<td style="text-align:center">……</td>
</tr>
<tr>
<td style="text-align:center">Sections</td>
<td style="text-align:center">Segments</td>
</tr>
<tr>
<td style="text-align:center">……</td>
<td style="text-align:center">……</td>
</tr>
</tbody>
</table>
<p>ELF文件ELF Header结构如下：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">......</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> EI_NIDENT 16</span></div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">u_int8_t</span> u1;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">u_int16_t</span> u2;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">u_int32_t</span> u4;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">int8_t</span> i1;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">int16_t</span> i2;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">int32_t</span> i4;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> &#123;</div><div class="line">    u1 e_ident[EI_NIDENT];</div><div class="line">    u2 e_type;</div><div class="line">    u2 e_machine;</div><div class="line">    u4 e_version;</div><div class="line">    u4 e_entry;</div><div class="line">    u4 e_phoff;</div><div class="line">    u4 e_shoff;</div><div class="line">    u4 e_flags;</div><div class="line">    u2 e_ehsize;</div><div class="line">    u2 e_phentsize;</div><div class="line">    u2 e_phnum;</div><div class="line">    u2 e_shentsize;</div><div class="line">    u2 e_shnum;</div><div class="line">    u2 e_shstrndx;</div><div class="line">&#125;elf32_Header, *pElf32_Header;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div></pre></td></tr></table></figure>
<p>根据文档，对于Linker，其对Section进行操作，而在装入内存执行时，进程内部数据是按照段(Segment)进行组织，所以对于非可执行的ELF文件，如gcc -c xxx.o生成的 xxx.o文件，其内部可以没有Program Header Table，但必须有Section Header Table；对于可执行文件(gcc -o xxx)，其内部可以没有Section Header Table，但是必须有Program Header Table。</p>
<p>因此，我们可以利用ELF Header中与section有关的字段，如e_shoff和e_shentsize，用来存放我们加解密需要的数据来供decryptFunc函数使用，如此不仅方便，还能有效避免可执行文件被IDA等静态工具分析。</p>
<p>##0x02 开工</p>
<hr>
<p>####A、准备一个简单的C源程序：</p>
<ul>
<li>头文件elf32.h，包含对elf header结构的定义</li>
<li>example.c 示例文件，包含解密函数等定义</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"elf32.h"</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXLEN 1000</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> PAGESIZE 4096</span></div><div class="line"></div><div class="line"><span class="comment">//The function to decrypt the segment</span></div><div class="line">__attribute__((constructor)) <span class="function"><span class="keyword">void</span> <span class="title">mydecrypt</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line"><span class="comment">//The section that will be encrypted</span></div><div class="line">__attribute((section(<span class="string">"mysection"</span>))) <span class="function"><span class="keyword">void</span> <span class="title">mysecFunction</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">__attribute((section(<span class="string">"mysection_data"</span>))) <span class="keyword">char</span> strMySec[] = <span class="string">"NzTfdujpo"</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="title">getAddress</span><span class="params">(<span class="keyword">char</span> *strName)</span></span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"hello world\n"</span>);</div><div class="line">    mysecFunction();</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">mysecFunction</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    ......</div><div class="line">	<span class="comment">//deal data in section mysection_data</span></div><div class="line">	<span class="comment">//then print it</span></div><div class="line">	......</div><div class="line">    <span class="keyword">return</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">mydecrypt</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">	......</div><div class="line">	<span class="comment">//code will decrypt data in section: mysection</span></div><div class="line">	......</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/****************************************************</span></div><div class="line">* find a module's base via /proc/[pid]/maps,</div><div class="line">* in this scenario, it will be the base addr of the</div><div class="line">* executable elf file's base address</div><div class="line">****************************************************/</div><div class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="title">getAddress</span><span class="params">(<span class="keyword">char</span> *strName)</span></span>;</div><div class="line">&#123;</div><div class="line">    <span class="keyword">char</span> buf[MAXLEN] = &#123;<span class="number">0</span>&#125;;</div><div class="line">    <span class="keyword">char</span> *sAddr = <span class="literal">NULL</span>;</div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> uRet = <span class="number">0</span>;</div><div class="line">    FILE *fp = <span class="literal">NULL</span>;</div><div class="line"></div><div class="line">    <span class="built_in">sprintf</span>(buf, <span class="string">"/proc/%d/maps"</span>, getpid());</div><div class="line">    <span class="keyword">if</span> (!(fp = fopen(buf, <span class="string">"r"</span>))) &#123;</div><div class="line">        perror(<span class="string">"Error when open file\n"</span>);</div><div class="line">        <span class="keyword">return</span> uRet;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">while</span>(fgets(buf, <span class="keyword">sizeof</span>(buf), fp)) &#123;</div><div class="line">        <span class="keyword">if</span> (<span class="built_in">strstr</span>(buf, strName)) &#123;</div><div class="line">            sAddr = strtok(buf, <span class="string">"-"</span>);</div><div class="line">            uRet = strtol(sAddr, <span class="literal">NULL</span>, <span class="number">16</span>);</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> uRet;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>代码大概内容如下：</p>
<ul>
<li>一个mysection节，包含一个会被加密的函数mysecFunction()，函数会把mysectin_data里的字符数组进行处理（其实是加），打印出真正的字符串</li>
<li>一个mysection_data节，包含一个字符数组，用于打印</li>
<li>一个会在程序加载到内存后init阶段执行的解密函数mydecrypt()，函数</li>
<li>一个getAddress函数，用来获取程序加载基地址(<strong>其实这个函数在这里可以看成是多余的，因为和shared object不一样，可执行文件的程序地址是写死的，写这里是作为备忘，总归会碰到加密so的</strong>)</li>
</ul>
<p>对源码进行编译生成目标文件：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ gcc -m32 -c -o example.o example.c</div><div class="line">$ gcc -m32 -o example example.o -Wl,--section-start=mysection=0x08881000</div></pre></td></tr></table></figure>
<p>这里需要注意的是加了编译选项-Wl,–section-start=mysection=0x08881000，原因在于：</p>
<ul>
<li>so被加载进来后，通常其起始地址是按页对齐的，不同于so，elf可执行文件里代码位置是写死的，而且通常每个section里的代码在segment里并不会按页对齐，所以我们的mysection通常不会在一个页的起始处</li>
<li>加密函数使用了mprotect活的相关内存区域的写入权限，mprotect函数修改内存权限是按页修改，所以如果不强制到某个页上，函数调用会失败</li>
</ul>
<p>所以，指定对应节的起始地址为一个按4K对齐的地址。</p>
<p>####B、加密生成的ELF可执行文件的指定区域</p>
<p>这里使用python脚本自动搜索完成<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ./elfshell.py example</div></pre></td></tr></table></figure></p>
<p>思路如下：</p>
<ul>
<li>读取ELF Header，取得Section Table，Section String Name Table</li>
<li>遍历Section Table和Section Stringg Name Table，找到mysection节的offset[<strong>磁盘上文件中位置</strong>]，addr[<strong>加载到内存后的位置</strong>]，size等信息</li>
<li>利用offset和size，加密mysection的内容</li>
<li>把mysection的addr，size填入elf-header结构的e_shoff,e_shentsize中，供解密函数mydecrypt()使用[<strong>前面已经说过，elf-header结构里与section相关的信息在执行时是不会是用的</strong>]</li>
</ul>
<p>####C、执行</p>
<p>完成上述步骤后，使用IDA静态逆向elf文件example，会提示无法正确解析，但是可以正常执行，执行流程：</p>
<ul>
<li>首先，constructor属性的mydecrypt()会执行，调用getAddress得到example基址</li>
<li>mydecrypt()读取elf-header结构的e_shoff和e_shentsize，找到mysection</li>
<li>解密mysection</li>
<li>程序开始执行</li>
</ul>
<p>代码：<a href="https://github.com/ExiaHan/ELF_Shell" target="_blank" rel="external">github</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;#0x00 前言&lt;/p&gt;
&lt;p&gt;之前看了ELF文件的文件格式PDF&lt;a href=&quot;http://flint.cs.yale.edu/cs422/doc/ELF_Format.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;文档&lt;/a&gt;，又从&lt;a h
    
    </summary>
    
      <category term="Linux" scheme="http://blog.exiahan.com/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://blog.exiahan.com/tags/Linux/"/>
    
      <category term="ELF" scheme="http://blog.exiahan.com/tags/ELF/"/>
    
      <category term="Shell" scheme="http://blog.exiahan.com/tags/Shell/"/>
    
  </entry>
  
  <entry>
    <title>Study ELF File Format</title>
    <link href="http://blog.exiahan.com/2015/07/31/Study-ELF-File-Format/"/>
    <id>http://blog.exiahan.com/2015/07/31/Study-ELF-File-Format/</id>
    <published>2015-07-31T08:30:21.000Z</published>
    <updated>2017-01-08T15:23:08.153Z</updated>
    
    <content type="html"><![CDATA[<p>##前言</p>
<p>为了对Hook， Relocation， 以及一些程序保护技术有更深的了解，正在学习Linux ELF文件格式，所以找到了ELF_Format的文档，这里把里面的一些内容做一下翻译同时记录下。如有错误还请指出，共同学习一起进步啊鲁～ლ(╹◡╹ლ)</p>
<p>##正文</p>
<p>####简介</p>
<p>ELF是Executable and Linking Format的简称，作为Application Binary Interface(ABI)的一部分，是Unix System Laboratories(USL)推出和制定的，是Unix、Linux以及一些类Unix系统使用的一套可执行文件结构标准，Linux下常见的.o,.so以及可执行文件都是ELF文件格式。</p>
<p>ELF文件格式出现的目的是为不同架构的机器提供一个较为统一的规范，减少重新编码、编译的工作量。</p>
<p>ELF文件在Linux中有三种类型：</p>
<ul>
<li>Relocatable File: 可重定位文件，承载代码(说成指令更准确)和数据，可以同其他的<strong>.o</strong>文件一起经由链接器生成Executable File(可执行文件)或者Share Object file(共享对象文件，或者叫动态链接库)。</li>
<li>Executable File：可执行文件，可以被执行，文件中的包含了要被执行的指令和数据等，以及指明了如何创建一个程序的进程镜像。</li>
<li>Shared Object File：共享对象文件，类似于Windows下的Dynamic Link Library(动态链接库)，共享对象文件可以有如下两种Link环境:<ul>
<li>同其他的Relocatable File或者Shared Object File组成一个新的Object File文件</li>
<li>通过<strong>动态链接</strong>的方式，同其他的Shared Object File以及Executable File组成进程镜像。</li>
</ul>
</li>
</ul>
<p>####File Format(文件结构)</p>
<p>ELF的Object File参与了程序的Link和执行，不同的阶段，其文件中的结构略有不同，下表给出了组织结构：</p>
<table>
<thead>
<tr>
<th style="text-align:center">Link View</th>
<th style="text-align:center">Execution View</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">ELF Header</td>
<td style="text-align:center">ELF Header</td>
</tr>
<tr>
<td style="text-align:center">Program header table(optional)</td>
<td style="text-align:center">Program header table</td>
</tr>
<tr>
<td style="text-align:center">Section 1</td>
<td style="text-align:center">Segment 1</td>
</tr>
<tr>
<td style="text-align:center">…</td>
<td style="text-align:center">…</td>
</tr>
<tr>
<td style="text-align:center">Section n</td>
<td style="text-align:center">Segment n</td>
</tr>
<tr>
<td style="text-align:center">…</td>
<td style="text-align:center">…</td>
</tr>
<tr>
<td style="text-align:center">Section header table</td>
<td style="text-align:center">Section header table(optional)</td>
</tr>
</tbody>
</table>
<hr>
<ul>
<li>ELF Header 包含整个文件的路线图，描述了整个的文件的组成结构</li>
<li>Section 包含了说有Link需要的数据，如指令(instruction)，数据(data)，符号表(Symbol Table)，重定位信息(Relocation Infomation)</li>
<li>Program header table 告诉系统如何创建程序的进程镜像。<em>用于创建进程镜像的文件必有Program header table，相反，重定位文件可以没有</em></li>
<li>Section header table 包含了描述文件中各个section的信息，每个Section在表中都有一个对应的条目，其中包含了Section Name，Size等信息。<em>linking过程中文件必须提此表，其他情形，如已经被链接一个可执行文件可以不需要。</em></li>
</ul>
<hr>
<p><strong>（需要注意的是，ELF文件的结构并不一定是上面表中所列的顺序，事实上除了ELF Header一定在文件头部外，其他部分的顺序都是可变的）</strong></p>
<hr>
<p>####Data Representation(数据表述)</p>
<hr>
<p>为了达到适应不同平台的目的，Object File已一种平台无关的格式存放一些控制数据，从而达到用一种统一的方式定义和翻译Object File，余下的部分数据使用目标处理器(即平台架构)编码方式进行编码。<br>下面是ELF文件定义用到的32Bit-data-types:</p>
<table>
<thead>
<tr>
<th style="text-align:center">Name</th>
<th style="text-align:center">Size</th>
<th style="text-align:center">Alignment</th>
<th style="text-align:center">Purpose</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Elf32_Addr</td>
<td style="text-align:center">4</td>
<td style="text-align:center">4</td>
<td style="text-align:center">Unsigned program address</td>
</tr>
<tr>
<td style="text-align:center">Elf32_Half</td>
<td style="text-align:center">2</td>
<td style="text-align:center">2</td>
<td style="text-align:center">Unsigned medium integer</td>
</tr>
<tr>
<td style="text-align:center">Elf32_Off</td>
<td style="text-align:center">4</td>
<td style="text-align:center">4</td>
<td style="text-align:center">Unsigned file ofset</td>
</tr>
<tr>
<td style="text-align:center">Elf32_Sword</td>
<td style="text-align:center">4</td>
<td style="text-align:center">4</td>
<td style="text-align:center">Signed large integer</td>
</tr>
<tr>
<td style="text-align:center">Elf32_Word</td>
<td style="text-align:center">4</td>
<td style="text-align:center">4</td>
<td style="text-align:center">Unsigned large integer</td>
</tr>
<tr>
<td style="text-align:center">unsigned char</td>
<td style="text-align:center">1</td>
<td style="text-align:center">1</td>
<td style="text-align:center">Unsigned small integer</td>
</tr>
</tbody>
</table>
<p>Object File中定义的数据结构都遵从“自然”的大小和对齐方式(Po主理解为平台对应)，如果有需要，可以显示指定对齐方式，以保证如4 Bytes的对象一定是4 Bytes对齐的，即该对象所占存储大小是4 Bytes的倍数。举例来说，一个包含Elf32_Addr的成员的数据结构将被4 Bytes对齐。</p>
<p>为了可移植性(Portability)，ELF没有位字段(bit-field)。</p>
<hr>
<p>####ELF Header(文件头)</p>
<p>有些Object File的控制结构(Control Structures)可以增长，因为ELF Header包含了它们的实际大小。如果Object File的文件格式改变，程序可能会遇到控制结构与期望的大小不相符的情况。在这种情况下程序可能会忽略掉“多余”(因为比期望的大小大，可能会多出一些描述数据)的信息；对于“遗失”(因为比期望的大小小)的信息的处理方法依赖于上下文，并且如果定义extensions的话，将在其中被规定相关处理方式。</p>
<p><strong>ELF Header</strong></p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">define</span> EI_NIDENT 16</span></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span>&#123;</div><div class="line">	unsignedchar  	e_ident[EI_NIDENT];</div><div class="line">	Elf32_Half		e_type;</div><div class="line">	Elf32_Half		e_machine;</div><div class="line">	Elf32_Word		e_version;</div><div class="line">	Elf32_Addr		e_entry;</div><div class="line">	Elf32_Off	 	e_phoff;</div><div class="line">	Elf32_Off	 	e_shoff;</div><div class="line">	Elf32_Word		e_flags;</div><div class="line">	Elf32_Half		e_ehsize;</div><div class="line">	Elf32_Half		e_phentsize;</div><div class="line">	Elf32_Half		e_phnum;</div><div class="line">	Elf32_Half		e_shentsize;</div><div class="line">	Elf32_Half		e_shnum;</div><div class="line">	Elf32_Half		e_shstrndx;</div><div class="line">&#125;Elf32_Ehdr;</div></pre></td></tr></table></figure>
<ul>
<li>e_ident 标记整个文件为Object File并且提供平台无关的数据用来解码和翻译整个文件内容。</li>
<li>e_type 说明具体是哪一种Object File：</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">enum</span> Elf32_Type&#123;</div><div class="line">	ET_NONE = <span class="number">0x0</span>;</div><div class="line">	ET_REL = <span class="number">0x1</span>;</div><div class="line">	ET_EXEC = <span class="number">0x2</span>;</div><div class="line">	ET_DYN = <span class="number">0x3</span>;</div><div class="line">	ET_CORE = <span class="number">0x4</span>;</div><div class="line">	ET_LOPROC = <span class="number">0xff00</span>;</div><div class="line">	ET_HIPROC = <span class="number">0xffff</span>;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>Core File的内容没有被制定，ET_CORE作为保留字存在。ET_LOPROC/HIPROC两者作为处理器指定语义的保留字，两者可兼或(ET_LOPROC | ET_HIPROC)，其他的一些没有用到的类型同样作为保留字，将来可能用来关联一些新的必要的文件类型。</p>
<ul>
<li>e_machine 指定平台架构：</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">enum</span> Elf32_Machine&#123;</div><div class="line">	EM_NONE = <span class="number">0x0</span>;</div><div class="line">	EM_M32 = <span class="number">0x1</span>;</div><div class="line">	EM_SPARC = <span class="number">0x2</span>;</div><div class="line">	EM_386 = <span class="number">0x3</span>;</div><div class="line">	EM_68K = <span class="number">0x4</span>;</div><div class="line">	EM_88K = <span class="number">0x5</span>;</div><div class="line">	EM_860 = <span class="number">0x7</span>;</div><div class="line">	EM_MIPS = <span class="number">0x8</span>;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>其他的值作为保留字来关联将来可能出现的新平台架构，处理器定制(Processor-specific)ELF名使用机器平台名来区分它们，举例来说：有一个在平台EM_386上的 e<em>flag(会以EF</em>开头) 为 WIDGET，那么，这个flag的将会写成 EF_386_WINDGET。</p>
<ul>
<li>e_version 指定ELF的文件版本，现在只有两个值：</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">enum</span> Elf32_Version&#123;</div><div class="line">	EV_NONE = <span class="number">0x0</span>;</div><div class="line">	EV_CURRENT = <span class="number">0x1</span>;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>目前一般情况下值是1，但一些特殊情况下也会是一些其他的数值(如有扩展的ELF会用一个大数，或者当需要用不同的值来反应当前的版本时)。</p>
<ul>
<li>e_entry 给出system first transfers control需要的用来启动进程的虚拟地址，如果没有入口，那么值是0</li>
</ul>
<p><strong><em>(bytes)表示字节为单位</em></strong></p>
<ul>
<li>e_phoff 给出program header table的offet(bytes)，如果没有，那么是0</li>
<li>e_shoff 给出section header table的offset(bytes)，如果没有，那么是0</li>
<li>e_ehsize ELF Header的size(bytes)，如果没有，那么是0</li>
<li>e_phentsize Program Header Table中每个条目(entry)的size(bytes)，所有的条目大小相同</li>
<li>e_phnum Program Header Table中条目(entry)的数目，因此phentsize × phnum即为整个表的大小(bytes)；如果没有Program Header Table，那么值为0</li>
<li>e_shentsize Section Header Table中每个条目(entry)的size(bytes)，所有条目大小相同</li>
<li>e_shnum Section Header Table中条目(entry)的数目，因此shentsize × shnum即为整个表的大小(bytes)；如果没有Section Header Table，那么值为0</li>
<li>e_shstrndx 存放一个与Section name string table相关的索引(index)，如果没有section name table，那么值为SHN_UNDEF</li>
</ul>
<p>####ELF Identification(ELF 定义)</p>
<p>如前所说，ELF 提供了不同种类的文件框架来适应不同的处理器、数据编码以及不同类型的机器。为了支持整个Object File家族，ELF文件起始处的一连串字节(<strong>elf32_header.e_ident[]</strong>)指出了如何做到平台无关的解析文件(即不用在意是在哪种处理器上做的探询，同时也和文件剩余内容无关)。</p>
<p>ELF头部(Object File同样)起始的几个字节与e_ident[]的成员一致：</p>
<p><em>e_ident[] Identification Index(e_ident[]数组中标识的索引值)：</em></p>
<table>
<thead>
<tr>
<th style="text-align:center">索引名</th>
<th style="text-align:center">值</th>
<th style="text-align:center">用途</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">EI_MAG0</td>
<td style="text-align:center">0x0</td>
<td style="text-align:center">文件标识</td>
</tr>
<tr>
<td style="text-align:center">EI_MAG1</td>
<td style="text-align:center">0x1</td>
<td style="text-align:center">文件标识</td>
</tr>
<tr>
<td style="text-align:center">EI_MAG2</td>
<td style="text-align:center">0x2</td>
<td style="text-align:center">文件标识</td>
</tr>
<tr>
<td style="text-align:center">EI_MAG3</td>
<td style="text-align:center">0x3</td>
<td style="text-align:center">文件标识</td>
</tr>
<tr>
<td style="text-align:center">EI_CLASS</td>
<td style="text-align:center">0x4</td>
<td style="text-align:center">文件类型</td>
</tr>
<tr>
<td style="text-align:center">EI_DATA</td>
<td style="text-align:center">0x5</td>
<td style="text-align:center">数据编码方式</td>
</tr>
<tr>
<td style="text-align:center">EI_VERSION</td>
<td style="text-align:center">0x6</td>
<td style="text-align:center">文件版本</td>
</tr>
<tr>
<td style="text-align:center">EI_PAD</td>
<td style="text-align:center">0x7</td>
<td style="text-align:center">填充字节起始处</td>
</tr>
<tr>
<td style="text-align:center">EI_NIDENT</td>
<td style="text-align:center">0x10</td>
<td style="text-align:center">e_ident[]的大小</td>
</tr>
</tbody>
</table>
<p>上面列出的是e_ident[index]中每个index对应的值，与索引对应位的值定义如下：</p>
<ul>
<li>EI_MAG0～EI_MAG3 文件魔数，标识文件为ELF文件，值依次为<strong>0x7F、’E’、’L’、’F’</strong></li>
<li><p>EI_CLASS 标识文件类型</p>
<ul>
<li>ELFCLASSNONE &emsp;0x0 &emsp; 无效文件</li>
<li>ELFCLASS32 &emsp;&emsp;&emsp;0x1 &emsp; 32bit文件</li>
<li>ELFCLASS64 &emsp;&emsp;&emsp;0x2 &emsp; 64bit文件</li>
</ul>
</li>
</ul>
<p>ELF文件格式被定义为对于各种不同大小(这里是说如果机器cpu地址线等大小的不同)的机器来说都是便携的，而不用把大型机的文件形式强加于小型机上。ELFCLASS32类型可以支持虚拟地址最大到4GiB(2^32 Bytes),它使用的其他定义和之前已经描述到的相同。</p>
<p>ELFCLASS64是为64位架构保留的，出现在这里仅仅是为了体现未来可能的变化方向，但是64位的定义还没被定义。其他类型将按需被定义，以适应不同的基本类型和大小的Object File。</p>
<ul>
<li><p>EI_DATA 指定编码方式，现在有如下三种：</p>
<ul>
<li>ELFDATANONE &emsp; 0x0 &emsp; 无效数据编码</li>
<li>ELFDATA2LSB &emsp; 0x1 &emsp; 小端(低位在低地址)</li>
<li>ELFDATA2MSB &emsp; 0x2 &emsp; 大端(低位在高地址)</li>
</ul>
</li>
<li><p>EI_VERSION 指定ELF版本号，现在必须是EV_CURRENT(0x1)</p>
</li>
<li>EI_PAD 标志着e_ident[]中未使用字节的起始索引，现阶段作为保留字节全为0x0，以后可能会有其他用途。</li>
<li>EI_NIDENT 表示e_ident[]的结束位置，这也是固定的，因为e_ident[]长度是16，所以为0x16</li>
</ul>
<p>一个文件的编码方式制定了如何解析文件中的基本对象。就像上面说到的，ELFCLASS32类型的文件使用的对象占用的字节数(bytes)有1Byte，2Bytes和4Bytes。在这种顶一下，数据对象的表示方法如下所示：</p>
<ul>
<li>ELFDATA2LSB</li>
</ul>
<p>ELFDATA2LSB编码方式指定了使用补码，并且最低位有效字节(the least significant byte)放在最低的地址上(小端，Intel主机序)</p>
<table>
<thead>
<tr>
<th style="text-align:right">字节编号</th>
<th style="text-align:center">0x0</th>
<th style="text-align:center">0x1</th>
<th style="text-align:center">0x2</th>
<th>0x3</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:right">0x01</td>
<td style="text-align:center">0x1</td>
</tr>
<tr>
<td style="text-align:right">0x0102</td>
<td style="text-align:center">0x02</td>
<td style="text-align:center">0x01</td>
</tr>
<tr>
<td style="text-align:right">0x01020304</td>
<td style="text-align:center">0x04</td>
<td style="text-align:center">0x03</td>
<td style="text-align:center">0x02</td>
<td>0x01</td>
</tr>
</tbody>
</table>
<p>+ELFDATA2MSB</p>
<p>ELFDATA2MSB编码方式指定了使用补码，并且最高位有效字节(the least significant byte)放在最低的地址上(大端，网络序)</p>
<table>
<thead>
<tr>
<th style="text-align:right">字节编号</th>
<th style="text-align:center">0x0</th>
<th style="text-align:center">0x1</th>
<th style="text-align:center">0x2</th>
<th>0x3</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:right">0x01</td>
<td style="text-align:center">0x1</td>
</tr>
<tr>
<td style="text-align:right">0x0102</td>
<td style="text-align:center">0x01</td>
<td style="text-align:center">0x02</td>
</tr>
<tr>
<td style="text-align:right">0x01020304</td>
<td style="text-align:center">0x01</td>
<td style="text-align:center">0x02</td>
<td style="text-align:center">0x03</td>
<td>0x04</td>
</tr>
</tbody>
</table>
<p>####Machine Infomation(机器信息)</p>
<p><strong>32Bit Intel Archtecture</strong></p>
<p>根据e_ident[]中的标识符定义，Intel IA32架构要求如下的值</p>
<table>
<thead>
<tr>
<th style="text-align:left">Position</th>
<th style="text-align:left">Value</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">e_ident[EI_CLASS]</td>
<td style="text-align:left">ELFCLASS32</td>
</tr>
<tr>
<td style="text-align:left">e_ident[EI_DATA]</td>
<td style="text-align:left">ELFDATA2LSB</td>
</tr>
</tbody>
</table>
<p>驻留在ELF Header中用来标识处理器的e_machine必须是<strong>EM_386</strong></p>
<p>e_flags成员存放与文件相关的按位标识的flags，32Bit Intel Archtecture没有定义flags，所以为0。</p>
<p>####Sections(节)</p>
<p>一个Object File使用一个Section Header Table(节区头表)定位文件中所有的Sections(节)。节区头表是一个由Elf32_Shdr结构体组成的数组。一个节区头表索引(section header table index)相当于这个数组的下标。Elf32_Ehdr.e_shoff给出了从文件起始到节区头表的偏移；Elf32_Ehdr.e_shnum指出节区头表中一共有多少个条目；Elf32_Ehdr.shentzise指出每个条目的大小(其实每个大小都一样)。</p>
<p>有一些节区头表索引值是保留的，一个Object File不会有与这些索引对应的节：</p>
<table>
<thead>
<tr>
<th style="text-align:left">Name</th>
<th style="text-align:right">Value</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">SHN_UNDEF</td>
<td style="text-align:right">0x0</td>
</tr>
<tr>
<td style="text-align:left">SHN_LORESERVE</td>
<td style="text-align:right">0xFF00</td>
</tr>
<tr>
<td style="text-align:left">SHN_LOPROC</td>
<td style="text-align:right">0xFF00</td>
</tr>
<tr>
<td style="text-align:left">SHN_HIPROC</td>
<td style="text-align:right">0xFF1F</td>
</tr>
<tr>
<td style="text-align:left">SHN_ABS</td>
<td style="text-align:right">0xFFF1</td>
</tr>
<tr>
<td style="text-align:left">SHN_COMMON</td>
<td style="text-align:right">0xFFF2</td>
</tr>
<tr>
<td style="text-align:left">SHN_HIRESERVE</td>
<td style="text-align:right">0xFFFF</td>
</tr>
</tbody>
</table>
<ul>
<li>SHN_UNDEF &emsp; 用来标记一个未定义的、丢失的、无关的、或者其他无意义的节引用(Section Reference)。如一个符号(symbol) “defined” 和 索引Section Number SHN_UNDEF相关，那么它是一个未定义的符号</li>
<li>SHN_LORESERVE &emsp; 保留索引的下界</li>
<li>SHN_LOPROC &emsp;</li>
<li>SHN_HIPROC &emsp; 从SHN_LOPROC到SHN_HIPROC是保留给CPU 的特殊的语义。</li>
<li>SHN_ABS &emsp; 对应引用量的绝对取值，这些值不受重定位影响(<em>Po主理解Virtual Address写死</em>)。举例来说，一个与SHN_ABS节有关的符号(symbol)拥有不受重定位影响的值。</li>
<li>SHN_COMMON &emsp; 与此节相关的是一些公共符号(common symbol)，如Fortran的COMMOM或者未分配的C外部变量</li>
<li>SHN_HIRESERVE &emsp; 保留索引的上界。系统保留了从SHN_LOREVERSE到SHN_HIREVERSE的索引值。这些索引值出现在Section Header Table中，即Section Header Table中不会包含与保留索引值对应的条目。</li>
</ul>
<p>Sections包含了一个Object File除ELF Header、Program Header Table、Section Header Table以外所有的信息。不仅如此，Object File的Sections还需要满足一些条件：</p>
<ul>
<li>每个Section只有一个Section Header来描述它。也有可能有只有Section Header但没有Section的情况。</li>
<li>每个Section占据Object File一段连续的字节空间(也可能为空)</li>
<li>Section之间不能覆盖。不存在一个Section中的直接位于另一个Section中的情况。</li>
<li>一个Object File中可能有无效(inactive)空间(原因在于对齐，硬盘上是512B，内存上是4K)，即文件中各个Headers和Sections可能不会使用到文件的每个字节空间。无效数据所表示的内容是未定义的。</li>
</ul>
<p><strong>Section Header(节头)</strong></p>
<p>Section Header 的结构化定义如下：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> &#123;</div><div class="line">	Elf32_Word	sh_name;</div><div class="line">	Elf32_Word	sh_type;</div><div class="line">	Elf32_Word	sh_flags;</div><div class="line">	Elf32_Addr	sh_addr;</div><div class="line">	Elf32_Off 	sh_offset;</div><div class="line">	Elf32_Word	sh_size;</div><div class="line">	Elf32_Word	sh_link;</div><div class="line">	Elf32_Word	sh_info;</div><div class="line">	Elf32_Word	sh_addralign;</div><div class="line">	Elf32_Word	sh_entsize;</div><div class="line">&#125;Elf32_Shdr;</div></pre></td></tr></table></figure>
<ul>
<li>sh_name 指出其所在Section的名字，其值是一个index，指向Section Header String Table中的对应条目(一个以’\0’结尾的字符串，C风格字符串)</li>
<li>sh_type 归类总结本段内容和语义</li>
<li>sh_flags 按bit标出一些属性杂项</li>
<li>sh_addr 如果所在Section将出现在一个进程镜像中，则本字段指出本Section第一个Byte应占据的Address，否则为0</li>
<li>sh_offset 从文件起始到这个Section第一个Byte的偏移，如果节类型是SHT_NOBITS，那么此种节不占空间，此时sh_offset仅是一种概念性的表示</li>
<li>sh_size 指出所在Section的大小(bytes)，除非节类型是SHT_NOBITS，否则节在文件中占据sh_size描述的字节大小。一个SHT_NOBITS的sh_size可能不是0，但是缺不会在文件中占据字节空间</li>
<li>sh_link 指出节区头表链接，具体解释依赖具体节区类型</li>
<li>sh_info 给出一些额外信息，具体解释依赖具体节区类型</li>
<li>sh_addralign 许多节区都有地址对齐约束(address alignment constraints)，举例来说：如果一个节存放的是双字(double word)，那么系统必须保证整个节区都是按照Double Word方式对齐。因此，<strong>sh_addr对sh_addralign取模结果必为0</strong>。现阶段仅有0，和2的整数幂是允许的数值，如果值为0或1，则表示没有对齐限制</li>
<li>sh_entsize 一些节区存放一张条目大小固定的表(a table of fixed-size entries)，如符号表。对于这种表，sh_entsize给出条目的大小。如果没有此种表，则为0</li>
</ul>
<p><em>sh_type的类型如下</em></p>
<table>
<thead>
<tr>
<th style="text-align:left">Name</th>
<th style="text-align:right">Value</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">SHT_NULL</td>
<td style="text-align:right">0x0</td>
</tr>
<tr>
<td style="text-align:left">SHT_PROGBITS</td>
<td style="text-align:right">0x1</td>
</tr>
<tr>
<td style="text-align:left">SHT_SYMTAB</td>
<td style="text-align:right">0x2</td>
</tr>
<tr>
<td style="text-align:left">SHT_STRTAB</td>
<td style="text-align:right">0x3</td>
</tr>
<tr>
<td style="text-align:left">SHT_RELA</td>
<td style="text-align:right">0x4</td>
</tr>
<tr>
<td style="text-align:left">SHT_HASH</td>
<td style="text-align:right">0x5</td>
</tr>
<tr>
<td style="text-align:left">SHT_DYNAMIC</td>
<td style="text-align:right">0x6</td>
</tr>
<tr>
<td style="text-align:left">SHT_NOTE</td>
<td style="text-align:right">0x7</td>
</tr>
<tr>
<td style="text-align:left">SHT_NOBITS</td>
<td style="text-align:right">0x8</td>
</tr>
<tr>
<td style="text-align:left">SHT_REL</td>
<td style="text-align:right">0x9</td>
</tr>
<tr>
<td style="text-align:left">SHT_SHLIB</td>
<td style="text-align:right">0xA</td>
</tr>
<tr>
<td style="text-align:left">SHT_DYNSYM</td>
<td style="text-align:right">0xB</td>
</tr>
<tr>
<td style="text-align:left">SHT_LOPROC</td>
<td style="text-align:right">0x70000000</td>
</tr>
<tr>
<td style="text-align:left">SHT_HIPROC</td>
<td style="text-align:right">0x7FFFFFFF</td>
</tr>
<tr>
<td style="text-align:left">SHT_LOUSER</td>
<td style="text-align:right">0x80000000</td>
</tr>
<tr>
<td style="text-align:left">SHT_HIUSER</td>
<td style="text-align:right">0xFFFFFFFF</td>
</tr>
</tbody>
</table>
<ul>
<li>SHT_NULL 标记此Section Header为非活动(inactive)头，不与任何Section关联，此Section Header中其他字段值无定义</li>
<li>SHT_PROGBITS 包含由程序定义的信息，其格式和意义都由程序唯一指定</li>
<li>SHT_SYMTAB 存放一张符号表，现阶段一个Object File每种类型的Section仅能有一个，这个限制在未来可能被解除。SHT_SYMTAB提供用于链接(link, ld)的符号，不过也能用于动态链接。</li>
<li>SHT_STRTAB 存放一张String 表，一个Object File可能有多个string table sections</li>
<li>SHT_RELA 存放用于重定位的条目，并且<strong>明确附加数(with explicit addends)</strong>，如用于32bit Object File的Elf32_Rela重定位类型。<strong>同样，一个Object File可能有多个重定位Section</strong></li>
<li>SHT_HASH 存放符号哈希表(symbol hash table)，所有参与动态链接的对象都必须包含一张符号哈习表，现阶段一个Object File只能包含一张symbol hash table，以后限制可能会解除</li>
<li>SHT_DYNAMIC 存放用于动态链接的信息，现阶段一个Object File只能包含一个SHT_DYNAMIC节，以后可能解除此限制</li>
<li>SHT_NOTE 存放以某种方式标记文件的信息</li>
<li>SHT_NOBITS 不占用文件空间，其他类似SHT_PROGBITSS，尽管不占用文件空间，但是其Section Header中的sh_offset成员放有抽象的文件偏移</li>
<li>SHT_REL 存放用于重定位的条目，但没有<strong>明确附加数(without explicit addends)</strong>，如用于32Bit Object File的Elf32_Rel重定位类型，一个Object File可能含有多个SHT_REL节</li>
<li>SHT_SHLIB 保留的，但是没有指明其意义。带有此节的程序可能没有遵守ABI(Application Binary Interface)</li>
<li>SHT_DYNSYM SHT_SYMTAB标识的Section作为一个完整的符号表，可能包含很对动态链接不需要的符号。因此有些Object File可能还会包含一个SHT_DYNSYM节，用来存放一个动态链接符号(dynamic linking symbols)的最小集合，以节省空间</li>
<li>SHT_LOPROC 从SHT_LOPROC到SHT_HIPROC作为保留的处理器定义语义节(Processor-Specifier Semantics)</li>
<li>SHT_HIPROC 从SHT_LOPROC到SHT_HIPROC作为保留的处理器定义语义节(Processor-Specifier Semantics)</li>
<li>SHT_LOUSER 指出为应用程序保留的Index的下界</li>
<li>SHT_HIUSER 指出为应用程序保留的Index的上界，SHT_LOUSER到SHT_HIUSER之间的Section Types可以被程序使用，而且不会和现在或者将来系统定义的节产生冲突</li>
</ul>
<p>其他的一些Section Type值作为保留字，就像之前提到的，索引为SHN_UNDEF(0x0)的Section Header可以存在，即使SHN_UNDEF标记未定义的节区关系(Section Reference)，SHN_UNDEF标记的Section，其在Section Header Table里对应的Elf32_Shdr结构体条目中所有成员的值均为0x0:</p>
<table>
<thead>
<tr>
<th style="text-align:left">Name</th>
<th style="text-align:center">Value</th>
<th style="text-align:left">Note</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">sh_name</td>
<td style="text-align:center">0x0</td>
<td style="text-align:left">No name</td>
</tr>
<tr>
<td style="text-align:left">sh_type</td>
<td style="text-align:center">SHT_NULL</td>
<td style="text-align:left">Inactive</td>
</tr>
<tr>
<td style="text-align:left">sh_flags</td>
<td style="text-align:center">0x0</td>
<td style="text-align:left">No flags</td>
</tr>
<tr>
<td style="text-align:left">sh_addr</td>
<td style="text-align:center">0x0</td>
<td style="text-align:left">No address</td>
</tr>
<tr>
<td style="text-align:left">sh_offset</td>
<td style="text-align:center">0x0</td>
<td style="text-align:left">No file offset</td>
</tr>
<tr>
<td style="text-align:left">sh_size</td>
<td style="text-align:center">0x0</td>
<td style="text-align:left">No size</td>
</tr>
<tr>
<td style="text-align:left">sh_link</td>
<td style="text-align:center">SHN_UNDEF</td>
<td style="text-align:left">No link information</td>
</tr>
<tr>
<td style="text-align:left">sh_info</td>
<td style="text-align:center">0x0</td>
<td style="text-align:left">No auxiliary informatioon</td>
</tr>
<tr>
<td style="text-align:left">sh_addralign</td>
<td style="text-align:center">0x0</td>
<td style="text-align:left">No alignment</td>
</tr>
<tr>
<td style="text-align:left">sh_entsize</td>
<td style="text-align:center">0x0</td>
<td style="text-align:left">No entries</td>
</tr>
</tbody>
</table>
<p><em>sh_flags类型如下</em></p>
<table>
<thead>
<tr>
<th style="text-align:left">Name</th>
<th style="text-align:right">Value</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">SHF_WRITE</td>
<td style="text-align:right">0x1</td>
</tr>
<tr>
<td style="text-align:left">SHF_ALLOC</td>
<td style="text-align:right">0x2</td>
</tr>
<tr>
<td style="text-align:left">SHF_EXECINSTR</td>
<td style="text-align:right">0x4</td>
</tr>
<tr>
<td style="text-align:left">SHF_MASKPROC</td>
<td style="text-align:right">0xF0000000</td>
</tr>
</tbody>
</table>
<p>这些flags通过对应的bit是否置1控制，为1即打开，0为关闭，所有未定义属性皆为0</p>
<ul>
<li>SHF_WRITE 所在Section运行时可写</li>
<li>SHF_ALLOC 所在节运行时占据进程内存空间(因为有些控制节运行时不占据进程空间，所以这一位对于这些节来说是关闭)</li>
<li>SHF_EXECINSTR 所在节包含可执行的机器指令</li>
<li>SHF_MASKPROC 为处理器特定语义保留</li>
</ul>
<p><em>sh_link和sh_info给出的信息依赖于所在节</em></p>
<table>
<thead>
<tr>
<th style="text-align:left">sh_type</th>
<th style="text-align:left">sh_link</th>
<th style="text-align:left">sh_info</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">SHT_DYNAMIC</td>
<td style="text-align:left">The section header index of the string table used by entries in the section.</td>
<td style="text-align:left">0x0</td>
</tr>
<tr>
<td style="text-align:left">SHT_HASH</td>
<td style="text-align:left">The section header index of the string table to which the hash table applies.</td>
<td style="text-align:left">0x0</td>
</tr>
<tr>
<td style="text-align:left">SHT_REL <br>SHT_RELA</td>
<td style="text-align:left">The section header index of the associated symbol table.</td>
<td style="text-align:left">The section header index of the section to which the relocation applies.</td>
</tr>
<tr>
<td style="text-align:left">SHT_SYMTAB <br>SHT_DYNSYM</td>
<td style="text-align:left">The section header index of the associated string table.</td>
<td style="text-align:left">One greater than the symbol table index of the last local symbol (binding STB_LOCAL).(最后一个局部符号的符号表索引值加一)</td>
</tr>
<tr>
<td style="text-align:left">Other</td>
<td style="text-align:left">SHN_UNDEF</td>
<td style="text-align:left">0x0</td>
</tr>
</tbody>
</table>
<p>####特殊节(Special Sections)</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;##前言&lt;/p&gt;
&lt;p&gt;为了对Hook， Relocation， 以及一些程序保护技术有更深的了解，正在学习Linux ELF文件格式，所以找到了ELF_Format的文档，这里把里面的一些内容做一下翻译同时记录下。如有错误还请指出，共同学习一起进步啊鲁～ლ(╹◡╹ლ)&lt;/
    
    </summary>
    
      <category term="Linux" scheme="http://blog.exiahan.com/categories/Linux/"/>
    
    
      <category term="ELF" scheme="http://blog.exiahan.com/tags/ELF/"/>
    
  </entry>
  
  <entry>
    <title>Linux Hook Notes</title>
    <link href="http://blog.exiahan.com/2015/07/29/Linux-Hook-Notes/"/>
    <id>http://blog.exiahan.com/2015/07/29/Linux-Hook-Notes/</id>
    <published>2015-07-29T01:59:25.000Z</published>
    <updated>2015-08-06T13:45:09.551Z</updated>
    
    <content type="html"><![CDATA[<p>##Foreword<br>For have read a article in WebSite <a href="http://www.codeproject.com/Articles/33340/Code-Injection-into-Running-Linux-Application" target="_blank" rel="external">code project</a>, and learned lots of from it. So make a memo for later consulting.</p>
<p>##Start<br>First we will make some file for the lab.So we need three file, a .h file, two .c file, the code showed below.</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//file mylib.h</span></div><div class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _MYLIB_H_</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> _MYLIB_H_</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">extern</span> <span class="keyword">void</span> <span class="title">myprint</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *str)</span></span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div></pre></td></tr></table></figure>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//file mylib.c</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"mylib.h"</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">myprint</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">   <span class="keyword">static</span> <span class="keyword">unsigned</span> counter = <span class="number">0</span>;</div><div class="line">   counter++;</div><div class="line">   <span class="built_in">printf</span>(<span class="string">"%d, pid (%d)"</span>, counter, getpid());</div><div class="line">   <span class="keyword">return</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//mymain.c</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"mylib.h"</span></span></div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> TRUE 1</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">while</span>(TRUE) &#123;</div><div class="line">        myprint();</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"Going to sleep\n"</span>);</div><div class="line">        sleep(<span class="number">3</span>);</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"Wake up\n"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//file myinject.c</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"mylib.h"</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">injection</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    myprint();</div><div class="line">    system(<span class="string">"date"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>For in the above, the file mylib.h, mylib.c is used to generate our test app, and the file myinject.c is used to do our injdect, that is we want hook the myprint function, when myprint is invoke, the function injection will be invoked indeed.</p>
<p>create the three file, and compile like below.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ gcc -g -Wall  <span class="_">-f</span>PIC -shared mylib.c -o libmylib.so</div><div class="line">$ gcc -g -lmylib -L ./ mymain.c -o app</div><div class="line">$ gcc -Wall myinject.c -c -o myinject.o</div><div class="line">$ <span class="built_in">export</span> LD_LIBRARY_PATH=.:[your path <span class="built_in">where</span> the libmylib.so <span class="keyword">in</span>]</div></pre></td></tr></table></figure>
<p>For Address-Independent, we add the option -fPIC when build mylib.c to libmylib.so</p>
<p>what you should care is the -lmylib is fixed to the libmylib, so remember to change it if you name your file another name.</p>
<p>##Let’s Rock Our App</p>
<p>Now we can do with the elf file what we just generated.</p>
<p>####1.Start our app</p>
<p>Run our app:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ./app</div></pre></td></tr></table></figure></p>
<p>Now we will see the PID via the output. Then we will use gdb to attach the app, via the pid:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$ ./app</div><div class="line">1, pid (5832)Going to sleep</div><div class="line">Wake up</div><div class="line">2, pid (5832)Going to sleep</div><div class="line">Wake up</div><div class="line">3, pid (5832)Going to sleep</div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo gdb -p PID[5832]</div></pre></td></tr></table></figure>
<p>After do this, we now attached to the app:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">$ sudo gdb -p 5832</div><div class="line">GNU gdb (GDB) 7.9.1</div><div class="line">Copyright (C) 2015 Free Software Foundation, Inc.</div><div class="line">License GPLv3+: GNU GPL version 3 or later</div><div class="line">......</div><div class="line">Attaching to process 6618</div><div class="line">Reading symbols from /home/exiahan/Developments/Linux/hijack/app...done.</div><div class="line">Reading symbols from ./libmylib.so...done.</div><div class="line">Reading symbols from /usr/lib32/libc.so.6...(no debugging symbols found)...done.</div><div class="line">Reading symbols from /lib/ld-linux.so.2...(no debugging symbols found)...done.</div><div class="line">0xf7722c10 <span class="keyword">in</span> __kernel_vsyscall ()</div><div class="line">(gdb)</div></pre></td></tr></table></figure>
<p>####2.Operate and Analysis our app/myinject.o<br>First we load our myinject.o into the app’s process space.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">(gdb)call open(<span class="string">"myinject.o"</span>, 2)</div><div class="line">(gdb)call mmap(0, Size, 1|2|4, 2, ReturnFrom-open, 0)</div></pre></td></tr></table></figure></p>
<p>In the open ,the value 2 represent the O_RDWR(Read and Write),then we use mmap function, to put the myinject.o in to the app’s process space, the first and second specify the size of myinject.o, if first is NULL(0), the os justify the start address of the file, the <strong>Size</strong> can be get via:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ls <span class="_">-l</span> myinject.o</div></pre></td></tr></table></figure>
<p>Then the 1|2|4 represent PROT_READ | PROT_WRITE | PROT_EXEC, so we can for we will write and execute it. The follow 1 represent the <strong>MAP_SHARED</strong> <strong>[But caution, we can use 2, means MAP_PRIVATE, it also works, the MAP_SHARED  will cause the myinject.o in the file also be changed if we write something, yes, actually we will.][好吧，重要的地方说中文，flags最好设置成MAP_PRIIVATE，这样mmap文件到内存后，修改不会影响disk文件，按照英文的文档用SHARED的话，下次要重新生成myinject.o，不然文件被改，怎么做都不会对的，对，我就是蠢货，没好好看mmap的文档，倒腾一天]</strong>. Also the ReturnFom-open is the return value after we call the open(), after do the above two steps, what we will see is like this:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">(gdb) call open("myinject.o", 2)</div><div class="line">$1 = 3</div><div class="line">(gdb) call mmap(0, 1044, 1|2|4, 2, 3, 0)</div><div class="line">$2 = -143544320</div><div class="line">(gdb)</div></pre></td></tr></table></figure>
<hr>
<p>Then, we will use readelf to analyse our the app and myinject.o</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">[exiahan@Veda hijack]$ readelf -r app</div><div class="line"></div><div class="line">重定位节 <span class="string">'.rel.dyn'</span> 位于偏移量 0x3c8 含有 1 个条目：</div><div class="line"> Offset     Info    Type            Sym.Value  Sym. Name</div><div class="line">08049844  00000506 R_386_GLOB_DAT    00000000   __gmon_start__</div><div class="line"></div><div class="line">重定位节 <span class="string">'.rel.plt'</span> 位于偏移量 0x3d0 含有 5 个条目：</div><div class="line"> Offset     Info    Type            Sym.Value  Sym. Name</div><div class="line">08049854  00000207 R_386_JUMP_SLOT   00000000   sleep</div><div class="line">08049858  00000307 R_386_JUMP_SLOT   00000000   myprint</div><div class="line">0804985c  00000407 R_386_JUMP_SLOT   00000000   puts</div><div class="line">08049860  00000507 R_386_JUMP_SLOT   00000000   __gmon_start__</div><div class="line">08049864  00000607 R_386_JUMP_SLOT   00000000   __libc_start_main</div></pre></td></tr></table></figure>
<p>we can see that the offset of the function we <strong>myprint</strong> want to hook is <strong>0x08049858</strong>, it is the address where it location in the file. But when app be loaded into memory, the the address will change. So how the app still can invoke myprint via call <em>0x08049858, it is the plt(Procedure Linker Table) and the GOT(Global Offset Table), when app is going to invoke myprint, it will call the </em>0x08049858(in fact it’s in the GOT), what in the address is a pointer that pointer to some procedure in plt, via the procedure, will found the real address of myprint, then the address will be put in 0x08049858, in the furture, when invoke myprint, simple call *0x08049858 will work.</p>
<p>So, when the app is running, we can change the value in 0x08049858, then we done the hook operation of the function <strong>myprint</strong>.</p>
<p>For do this, we first get the Base Address of myinject.o in app’s process space:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ cat /proc/5832/maps | grep myinject</div><div class="line"></div><div class="line">f771b000<span class="_">-f</span>771c000 rwxp 00000000 fe:03 20342761  [path]/myinject.o</div></pre></td></tr></table></figure>
<p>Now we know that the base-addr is 0xf774f000, then use readelf to get other info we need, like the offset of function injection(), and others that need to be relocated.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">$ readelf <span class="_">-s</span> myinject.o</div><div class="line"></div><div class="line">Symbol table <span class="string">'.symtab'</span> contains 12 entries:</div><div class="line">   Num:    Value  Size Type    Bind   Vis      Ndx Name</div><div class="line">     0: 00000000     0 NOTYPE  LOCAL  DEFAULT  UND</div><div class="line">     1: 00000000     0 FILE    LOCAL  DEFAULT  ABS myinject.c</div><div class="line">     2: 00000000     0 SECTION LOCAL  DEFAULT    1</div><div class="line">     3: 00000000     0 SECTION LOCAL  DEFAULT    3</div><div class="line">     4: 00000000     0 SECTION LOCAL  DEFAULT    4</div><div class="line">     5: 00000000     0 SECTION LOCAL  DEFAULT    5</div><div class="line">     6: 00000000     0 SECTION LOCAL  DEFAULT    7</div><div class="line">     7: 00000000     0 SECTION LOCAL  DEFAULT    8</div><div class="line">     8: 00000000     0 SECTION LOCAL  DEFAULT    6</div><div class="line">     9: 00000000    30 FUNC    GLOBAL DEFAULT    1 injection</div><div class="line">    10: 00000000     0 NOTYPE  GLOBAL DEFAULT  UND myprint</div><div class="line">    11: 00000000     0 NOTYPE  GLOBAL DEFAULT  UND system</div></pre></td></tr></table></figure>
<p>We see that the offset of function injection() is 0x0(the value).</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">$ readelf -S myinject.o</div><div class="line">共有 13 个节头，从偏移量 0x20c 开始：</div><div class="line"></div><div class="line">节头：</div><div class="line">  [Nr] Name              Type            Addr     Off    Size   ES Flg Lk Inf Al</div><div class="line">  [ 0]                   NULL            00000000 000000 000000 00      0   0  0</div><div class="line">  [ 1] .text             PROGBITS        00000000 000034 00001e 00  AX  0   0  1</div><div class="line">  [ 2] .rel.text         REL             00000000 0001ec 000018 08   I 11   1  4</div><div class="line">  [ 3] .data             PROGBITS        00000000 000052 000000 00  WA  0   0  1</div><div class="line">  [ 4] .bss              NOBITS          00000000 000052 000000 00  WA  0   0  1</div><div class="line">  [ 5] .rodata           PROGBITS        00000000 000052 000005 00   A  0   0  1</div><div class="line">  [ 6] .comment          PROGBITS        00000000 000057 000012 01  MS  0   0  1</div><div class="line">  [ 7] .note.GNU-stack   PROGBITS        00000000 000069 000000 00      0   0  1</div><div class="line">  [ 8] .eh_frame         PROGBITS        00000000 00006c 000038 00   A  0   0  4</div><div class="line">  [ 9] .rel.eh_frame     REL             00000000 000204 000008 08   I 11   8  4</div><div class="line">  [10] .shstrtab         STRTAB          00000000 0000a4 00005f 00      0   0  1</div><div class="line">  [11] .symtab           SYMTAB          00000000 000104 0000c0 10     12   9  4</div><div class="line">  [12] .strtab           STRTAB          00000000 0001c4 000025 00      0   0  1</div><div class="line">Key to Flags:</div><div class="line">  W (write), A (alloc), X (execute), M (merge), S (strings)</div><div class="line">  I (info), L (link order), G (group), T (TLS), E (exclude), x (unknown)</div><div class="line">  O (extra OS processing required) o (OS specific), p (processor specific)</div></pre></td></tr></table></figure>
<p>Now,we know that the offset .text about the file base is 0x34, the .rodata is 0x52, which the string “date” in.<br>So, the entry addr of injection() is:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">0xf771b000 + 0x34 = 0xf771b034</div></pre></td></tr></table></figure>
<p>So we change the value in 0x08049858 to 0xf771b034:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">(gdb)<span class="built_in">set</span> *0x08049858 = 0xf771b034</div></pre></td></tr></table></figure>
<p>But, only change the address of myprint() to injection() is not enough, there are some other entries need to be relocated, below:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">$ readelf -r myinject.o</div><div class="line"></div><div class="line">重定位节 <span class="string">'.rel.text'</span> 位于偏移量 0x1ec 含有 3 个条目：</div><div class="line"> Offset     Info    Type            Sym.Value  Sym. Name</div><div class="line">00000007  00000a02 R_386_PC32        00000000   myprint</div><div class="line">0000000f  00000501 R_386_32          00000000   .rodata</div><div class="line">00000014  00000b02 R_386_PC32        00000000   system</div><div class="line"></div><div class="line">重定位节 <span class="string">'.rel.eh_frame'</span> 位于偏移量 0x204 含有 1 个条目：</div><div class="line"> Offset     Info    Type            Sym.Value  Sym. Name</div><div class="line">00000020  00000202 R_386_PC32        00000000   .text</div></pre></td></tr></table></figure>
<p>As we invoke myprint() and system() in injection(), we give a string arguement “date” that stored in .rodata.<br>Because the myinject.o is load in to mem manual, so we have to do the relocation as the linker.<br>From above we see that there two kinds of relocation:</p>
<ul>
<li>R_386_PC32</li>
<li>R_386_32</li>
</ul>
<p>The R_386_PC32 means that the relocation will related to the value of eip(so called the program counter), simply, the offset is the offset that the real address of entries to the following address of the current instruction address,let <strong>S, A, P</strong> represent the real address in runtime, the addend num and the address that will be affect, in intel x86, the A is store in P, the calucator is:</p>
<center><strong><code>S-P+A</code></strong></center>

<p>(尼码，英语实在说不明白了，大概意思就是计算的偏移和实际运行是的eip相关，计算方法大概是实际所在的地址相对于读到这条指令后，紧接着的指令的地址的偏移。计算方法就是<strong>S、A、P</strong>分别表示的事该条目运行时的<strong>实际所在地址</strong>， <strong>附加数（有时候一个段，如.rodata要重定位的不止一个，一个个排的话肯定需要一个附加数，通常是2,4,8,结构体另说）</strong>，<strong>将被影响的地址，即此地址的值要被修改成真正的地址所在(通过readelf 和加载基地址联合重定位节.rel.text里的偏移得到)</strong>).</p>
<p>The R_386_32 is the absolute offset, just calc via base-addr + offset + addend.<br>(直接加载后基地址加上所在段偏移和附加数就OK)。</p>
<p>So, we will relocation the myprint(), “date”, system():</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#relocate myprint()</span></div><div class="line">(gdb) p *(0xf771b000 + 0x34 + 0x7)</div><div class="line"><span class="variable">$3</span> = -4</div><div class="line">(gdb) p myprint</div><div class="line"><span class="variable">$4</span> = &#123;void ()&#125; 0xf771d550 &lt;myprint&gt;</div><div class="line">(gdb) <span class="built_in">set</span> *(0xf771b000 + 0x34 + 0x7) = 0xf771d550 - (0xf771b000 + 0x34 + 0x7) - 4</div><div class="line"></div><div class="line"><span class="comment">#relocate system()</span></div><div class="line">(gdb) p *(0xf771b000 + 0x34 + 0x14)</div><div class="line"><span class="variable">$5</span> = -4</div><div class="line">(gdb) p system</div><div class="line"><span class="variable">$6</span> = &#123;&lt;text variable, no debug info&gt;&#125; 0xf7542e00 &lt;system&gt;</div><div class="line">(gdb) <span class="built_in">set</span> *(0xf771b000 + 0x34 + 0x14) = 0xf7542e00 - (0xf771b000 + 0x34 + 0x14) - 4</div><div class="line"></div><div class="line"><span class="comment">#relocate "date", in .rodata section, the off of .rodata is 0x52, get from above readelf -S myinject.o</span></div><div class="line">(gdb) p *(0xf771b000 + 0x34 + 0xf)</div><div class="line"><span class="variable">$7</span> = 0</div><div class="line">(gdb) <span class="built_in">set</span> *(0xf771b000 + 0x34 + 0xf) = 0xf771b000 + 0x52</div><div class="line">(gdb)</div></pre></td></tr></table></figure>
<p>####3.Final</p>
<p>After do this, we will get the result like below:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">1, pid (5832)Going to sleep</div><div class="line">Wake up</div><div class="line">2, pid (5832)Going to sleep</div><div class="line">Wake up</div><div class="line">3, pid (5832)Going to sleep</div><div class="line">2015年 07月 29日 星期三 21:17:17 CST</div><div class="line">4, pid (5832)Going to sleep</div><div class="line">Wake up</div><div class="line">2015年 07月 29日 星期三 21:17:20 CST</div><div class="line">5, pid (5832)Going to sleep</div><div class="line">Wake up</div><div class="line">2015年 07月 29日 星期三 21:17:23 CST</div><div class="line">6, pid (5832)Going to sleep</div><div class="line">Wake up</div><div class="line">2015年 07月 29日 星期三 21:17:26 CST</div><div class="line">7, pid (5832)Going to sleep</div></pre></td></tr></table></figure>
<p>##Summary<br>So we use gdb(ptrace) to attach a running process, and manual pull a .o file into its process space, then we replace the myprint@got.plt to the address of injection(), then we do the relocation for myinject.o as a linker(yeah, cause when the .o file to a executable file, the linker do the relocation, so we have to do it manually). Then we get our goal.</p>
<p>And in this lab, what we should learn is:</p>
<ul>
<li>ELF File Format</li>
<li>ELF Relocation<ul>
<li>R_386_PC32</li>
<li>R_386_32</li>
</ul>
</li>
<li>Usage of GDB [-p PID]</li>
<li>Usage of mmap [MAP_PRIVATE/SHARED] and open</li>
<li>Usage of readelf [-r -s -S]</li>
<li>Usage of objdump [-s -S]</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;##Foreword&lt;br&gt;For have read a article in WebSite &lt;a href=&quot;http://www.codeproject.com/Articles/33340/Code-Injection-into-Running-Linux-App
    
    </summary>
    
      <category term="Linux" scheme="http://blog.exiahan.com/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://blog.exiahan.com/tags/Linux/"/>
    
      <category term="Hook" scheme="http://blog.exiahan.com/tags/Hook/"/>
    
      <category term="GDB" scheme="http://blog.exiahan.com/tags/GDB/"/>
    
      <category term="Ptrace" scheme="http://blog.exiahan.com/tags/Ptrace/"/>
    
  </entry>
  
</feed>
