<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Linux on ExiaHan&#39;s Blog</title>
    <link>https://blog.exiahan.com/categories/linux/</link>
    <description>Recent content in Linux on ExiaHan&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 29 Jan 2017 03:29:32 +0000</lastBuildDate>
    
	<atom:link href="https://blog.exiahan.com/categories/linux/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Expand A Logical Volume In LVM</title>
      <link>https://blog.exiahan.com/posts/expand_a_logical_volume_in_lvm/</link>
      <pubDate>Sun, 29 Jan 2017 03:29:32 +0000</pubDate>
      
      <guid>https://blog.exiahan.com/posts/expand_a_logical_volume_in_lvm/</guid>
      <description>Abstract This blog is used to record the instructions about how to expand a logic volume in lvm.
CAUTION!
 What I write here may not completely right because there have been one month passed since I complete migrate my data to SSD. Resize volume may cause data lost, so be carefully. Your warranty is now void. I am not responsible for bricked devices, dead SD cards, thermonuclear war, or you getting fired because the alarm app failed and anyother errors.</description>
    </item>
    
    <item>
      <title>ELF_Simple_Shell</title>
      <link>https://blog.exiahan.com/posts/elf_simple_shell/</link>
      <pubDate>Tue, 18 Aug 2015 12:48:57 +0800</pubDate>
      
      <guid>https://blog.exiahan.com/posts/elf_simple_shell/</guid>
      <description>0x00 前言 之前看了ELF文件的文件格式PDF文档，又从看雪论坛和光哥那里看了点so加密的文章，就想试下直接对elf可执行文件加密。现做一点整理和记录，留待备用。
大概流程如下：
 核心代码放到指定节 .init section 加入解密函数decryptFunc 加密程序读取编译好的elf文件，加密指定节 运行时decryptFunc函数解密核心代码 正确执行  0x01 准备工作 要对ELF可执行文件进行处理，首先需要了解ELF文件格式，具体可见上一篇Po主的渣翻译（真的很渣，英语老师已气死），这里对需要用到的地方再进行一次说明：
ELF文件格式 ELF文件组织结构如下：
   Linker View Execution View     ELF Header ELF Header   &amp;hellip;&amp;hellip; &amp;hellip;&amp;hellip;   Section Header Table Section Header Table[Optional]   &amp;hellip;&amp;hellip; &amp;hellip;&amp;hellip;   Program Header Table[Optional] Program Header Table   &amp;hellip;&amp;hellip; &amp;hellip;&amp;hellip;   Sections Segments   &amp;hellip;&amp;hellip; &amp;hellip;&amp;hellip;    ELF文件ELF Header结构如下：</description>
    </item>
    
    <item>
      <title>Study ELF File Format</title>
      <link>https://blog.exiahan.com/posts/study_elf_file_format/</link>
      <pubDate>Fri, 31 Jul 2015 16:30:21 +0800</pubDate>
      
      <guid>https://blog.exiahan.com/posts/study_elf_file_format/</guid>
      <description>前言 为了对Hook， Relocation， 以及一些程序保护技术有更深的了解，正在学习Linux ELF文件格式，所以找到了ELF_Format的文档，这里把里面的一些内容做一下翻译同时记录下。如有错误还请指出，共同学习一起进步啊鲁～ლ(╹◡╹ლ)
正文 简介 ELF是Executable and Linking Format的简称，作为Application Binary Interface(ABI)的一部分，是Unix System Laboratories(USL)推出和制定的，是Unix、Linux以及一些类Unix系统使用的一套可执行文件结构标准，Linux下常见的.o,.so以及可执行文件都是ELF文件格式。
ELF文件格式出现的目的是为不同架构的机器提供一个较为统一的规范，减少重新编码、编译的工作量。
ELF文件在Linux中有三种类型：
 Relocatable File: 可重定位文件，承载代码(说成指令更准确)和数据，可以同其他的**.o**文件一起经由链接器生成Executable File(可执行文件)或者Share Object file(共享对象文件，或者叫动态链接库)。 Executable File：可执行文件，可以被执行，文件中的包含了要被执行的指令和数据等，以及指明了如何创建一个程序的进程镜像。 Shared Object File：共享对象文件，类似于Windows下的Dynamic Link Library(动态链接库)，共享对象文件可以有如下两种Link环境:  同其他的Relocatable File或者Shared Object File组成一个新的Object File文件 通过动态链接的方式，同其他的Shared Object File以及Executable File组成进程镜像。    File Format(文件结构) ELF的Object File参与了程序的Link和执行，不同的阶段，其文件中的结构略有不同，下表给出了组织结构：
   Link View Execution View     ELF Header ELF Header   Program header table(optional) Program header table   Section 1 Segment 1   &amp;hellip; &amp;hellip;   Section n Segment n   &amp;hellip; &amp;hellip;   Section header table Section header table(optional)      ELF Header 包含整个文件的路线图，描述了整个的文件的组成结构 Section 包含了说有Link需要的数据，如指令(instruction)，数据(data)，符号表(Symbol Table)，重定位信息(Relocation Infomation) Program header table 告诉系统如何创建程序的进程镜像。用于创建进程镜像的文件必有Program header table，相反，重定位文件可以没有 Section header table 包含了描述文件中各个section的信息，每个Section在表中都有一个对应的条目，其中包含了Section Name，Size等信息。linking过程中文件必须提此表，其他情形，如已经被链接一个可执行文件可以不需要。   （需要注意的是，ELF文件的结构并不一定是上面表中所列的顺序，事实上除了ELF Header一定在文件头部外，其他部分的顺序都是可变的）</description>
    </item>
    
    <item>
      <title>Linux Hook Notes</title>
      <link>https://blog.exiahan.com/posts/linux_hook_notes/</link>
      <pubDate>Wed, 29 Jul 2015 09:59:25 +0800</pubDate>
      
      <guid>https://blog.exiahan.com/posts/linux_hook_notes/</guid>
      <description>Foreword For have read a article in WebSite code project, and learned lots of from it. So make a memo for later consulting.
Start First we will make some file for the lab.So we need three file, a .h file, two .c file, the code showed below.
//file mylib.h #ifndef _MYLIB_H_ #define _MYLIB_H_  extern void myprint(const char *str); #endif //file mylib.c #include &amp;lt;stdio.h&amp;gt;#include &amp;lt;stdlib.h&amp;gt;#include &amp;lt;sys/types.h&amp;gt;#include &amp;lt;unistd.h&amp;gt;#include &amp;#34;mylib.h&amp;#34; void myprint() { static unsigned counter = 0; counter++; printf(&amp;#34;%d, pid (%d)&amp;#34;, counter, getpid()); return; } //mymain.</description>
    </item>
    
  </channel>
</rss>